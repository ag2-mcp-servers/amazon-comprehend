# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:19:20+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, SecretStr, conint, constr


class AnyLengthString(RootModel[str]):
    root: str


class AttributeNamesListItem(
    RootModel[
        constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*', min_length=1, max_length=63)
    ]
):
    root: constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*', min_length=1, max_length=63)


class AugmentedManifestsDocumentTypeFormat(Enum):
    PLAIN_TEXT_DOCUMENT = 'PLAIN_TEXT_DOCUMENT'
    SEMI_STRUCTURED_DOCUMENT = 'SEMI_STRUCTURED_DOCUMENT'


class BatchSizeLimitExceededException(RootModel[Any]):
    root: Any


class BlockType(Enum):
    LINE = 'LINE'
    WORD = 'WORD'


class ClientRequestTokenString(
    RootModel[constr(pattern=r'^[a-zA-Z0-9-]+$', min_length=1, max_length=64)]
):
    root: constr(pattern=r'^[a-zA-Z0-9-]+$', min_length=1, max_length=64)


class ComprehendArn(
    RootModel[
        constr(
            pattern=r'arn:aws(-[^:]+)?:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:[a-zA-Z0-9-]{1,64}/[a-zA-Z0-9](-*[a-zA-Z0-9])*((/dataset/[a-zA-Z0-9](-*[a-zA-Z0-9])*)|(/version/[a-zA-Z0-9](-*[a-zA-Z0-9])*))?',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws(-[^:]+)?:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:[a-zA-Z0-9-]{1,64}/[a-zA-Z0-9](-*[a-zA-Z0-9])*((/dataset/[a-zA-Z0-9](-*[a-zA-Z0-9])*)|(/version/[a-zA-Z0-9](-*[a-zA-Z0-9])*))?',
        max_length=256,
    )


class ComprehendArnName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*$', max_length=63)]
):
    root: constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*$', max_length=63)


class ComprehendDatasetArn(
    RootModel[
        constr(
            pattern=r'arn:aws(-[^:]+)?:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:flywheel/[a-zA-Z0-9](-*[a-zA-Z0-9])*/dataset/[a-zA-Z0-9](-*[a-zA-Z0-9])*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws(-[^:]+)?:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:flywheel/[a-zA-Z0-9](-*[a-zA-Z0-9])*/dataset/[a-zA-Z0-9](-*[a-zA-Z0-9])*',
        max_length=256,
    )


class ComprehendEndpointArn(
    RootModel[
        constr(
            pattern=r'arn:aws(-[^:]+)?:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:(document-classifier-endpoint|entity-recognizer-endpoint)/[a-zA-Z0-9](-*[a-zA-Z0-9])*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws(-[^:]+)?:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:(document-classifier-endpoint|entity-recognizer-endpoint)/[a-zA-Z0-9](-*[a-zA-Z0-9])*',
        max_length=256,
    )


class ComprehendEndpointName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*$', max_length=40)]
):
    root: constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*$', max_length=40)


class ComprehendFlywheelArn(
    RootModel[
        constr(
            pattern=r'arn:aws(-[^:]+)?:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:flywheel/[a-zA-Z0-9](-*[a-zA-Z0-9])*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws(-[^:]+)?:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:flywheel/[a-zA-Z0-9](-*[a-zA-Z0-9])*',
        max_length=256,
    )


class ComprehendModelArn(
    RootModel[
        constr(
            pattern=r'arn:aws(-[^:]+)?:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:(document-classifier|entity-recognizer)/[a-zA-Z0-9](-*[a-zA-Z0-9])*(/version/[a-zA-Z0-9](-*[a-zA-Z0-9])*)?',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws(-[^:]+)?:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:(document-classifier|entity-recognizer)/[a-zA-Z0-9](-*[a-zA-Z0-9])*(/version/[a-zA-Z0-9](-*[a-zA-Z0-9])*)?',
        max_length=256,
    )


class ConcurrentModificationException(RootModel[Any]):
    root: Any


class CreateDatasetResponse(BaseModel):
    DatasetArn: Optional[ComprehendDatasetArn] = None


class CreateEndpointResponse(BaseModel):
    EndpointArn: Optional[ComprehendEndpointArn] = None
    ModelArn: Optional[ComprehendModelArn] = None


class CreateFlywheelResponse(BaseModel):
    ActiveModelArn: Optional[ComprehendModelArn] = None
    FlywheelArn: Optional[ComprehendFlywheelArn] = None


class CustomerInputString(RootModel[SecretStr]):
    root: SecretStr


class CustomerInputStringList(RootModel[List[CustomerInputString]]):
    root: List[CustomerInputString] = Field(..., min_length=1)


class DatasetDataFormat(Enum):
    COMPREHEND_CSV = 'COMPREHEND_CSV'
    AUGMENTED_MANIFEST = 'AUGMENTED_MANIFEST'


class DatasetStatus(Enum):
    CREATING = 'CREATING'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'


class DatasetType(Enum):
    TRAIN = 'TRAIN'
    TEST = 'TEST'


class DeleteDocumentClassifierResponse(BaseModel):
    pass


class DeleteEndpointRequest(BaseModel):
    EndpointArn: ComprehendEndpointArn


class DeleteEndpointResponse(BaseModel):
    pass


class DeleteEntityRecognizerResponse(BaseModel):
    pass


class DeleteFlywheelRequest(BaseModel):
    FlywheelArn: ComprehendFlywheelArn


class DeleteFlywheelResponse(BaseModel):
    pass


class DeleteResourcePolicyResponse(BaseModel):
    pass


class DescribeDatasetRequest(BaseModel):
    DatasetArn: ComprehendDatasetArn


class DescribeEndpointRequest(BaseModel):
    EndpointArn: ComprehendEndpointArn


class DescribeFlywheelRequest(BaseModel):
    FlywheelArn: ComprehendFlywheelArn


class DescribeResourcePolicyRequest(BaseModel):
    ResourceArn: ComprehendModelArn


class Description(
    RootModel[
        constr(
            pattern=r'^([a-zA-Z0-9_])[\\a-zA-Z0-9_@#%*+=:?./!\s-]*$', max_length=2048
        )
    ]
):
    root: constr(
        pattern=r'^([a-zA-Z0-9_])[\\a-zA-Z0-9_@#%*+=:?./!\s-]*$', max_length=2048
    )


class DetectDominantLanguageRequest(BaseModel):
    Text: CustomerInputString


class DocumentClassifierArn(
    RootModel[
        constr(
            pattern=r'arn:aws(-[^:]+)?:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*(/version/[a-zA-Z0-9](-*[a-zA-Z0-9])*)?',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws(-[^:]+)?:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*(/version/[a-zA-Z0-9](-*[a-zA-Z0-9])*)?',
        max_length=256,
    )


class DocumentClassifierDataFormat(Enum):
    COMPREHEND_CSV = 'COMPREHEND_CSV'
    AUGMENTED_MANIFEST = 'AUGMENTED_MANIFEST'


class DocumentClassifierDocumentTypeFormat(Enum):
    PLAIN_TEXT_DOCUMENT = 'PLAIN_TEXT_DOCUMENT'
    SEMI_STRUCTURED_DOCUMENT = 'SEMI_STRUCTURED_DOCUMENT'


class DocumentClassifierEndpointArn(
    RootModel[
        constr(
            pattern=r'arn:aws(-[^:]+)?:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier-endpoint/[a-zA-Z0-9](-*[a-zA-Z0-9])*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws(-[^:]+)?:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier-endpoint/[a-zA-Z0-9](-*[a-zA-Z0-9])*',
        max_length=256,
    )


class DocumentClassifierMode(Enum):
    MULTI_CLASS = 'MULTI_CLASS'
    MULTI_LABEL = 'MULTI_LABEL'


class DocumentReadAction(Enum):
    TEXTRACT_DETECT_DOCUMENT_TEXT = 'TEXTRACT_DETECT_DOCUMENT_TEXT'
    TEXTRACT_ANALYZE_DOCUMENT = 'TEXTRACT_ANALYZE_DOCUMENT'


class DocumentReadFeatureTypes(Enum):
    TABLES = 'TABLES'
    FORMS = 'FORMS'


class DocumentReadMode(Enum):
    SERVICE_DEFAULT = 'SERVICE_DEFAULT'
    FORCE_DOCUMENT_READ_ACTION = 'FORCE_DOCUMENT_READ_ACTION'


class DocumentType(Enum):
    NATIVE_PDF = 'NATIVE_PDF'
    SCANNED_PDF = 'SCANNED_PDF'
    MS_WORD = 'MS_WORD'
    IMAGE = 'IMAGE'
    PLAIN_TEXT = 'PLAIN_TEXT'
    TEXTRACT_DETECT_DOCUMENT_TEXT_JSON = 'TEXTRACT_DETECT_DOCUMENT_TEXT_JSON'
    TEXTRACT_ANALYZE_DOCUMENT_JSON = 'TEXTRACT_ANALYZE_DOCUMENT_JSON'


class Double(RootModel[float]):
    root: float


class EndpointStatus(Enum):
    CREATING = 'CREATING'
    DELETING = 'DELETING'
    FAILED = 'FAILED'
    IN_SERVICE = 'IN_SERVICE'
    UPDATING = 'UPDATING'


class EntityRecognizerArn(
    RootModel[
        constr(
            pattern=r'arn:aws(-[^:]+)?:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*(/version/[a-zA-Z0-9](-*[a-zA-Z0-9])*)?',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws(-[^:]+)?:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer/[a-zA-Z0-9](-*[a-zA-Z0-9])*(/version/[a-zA-Z0-9](-*[a-zA-Z0-9])*)?',
        max_length=256,
    )


class EntityRecognizerDataFormat(Enum):
    COMPREHEND_CSV = 'COMPREHEND_CSV'
    AUGMENTED_MANIFEST = 'AUGMENTED_MANIFEST'


class EntityRecognizerEndpointArn(
    RootModel[
        constr(
            pattern=r'arn:aws(-[^:]+)?:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer-endpoint/[a-zA-Z0-9](-*[a-zA-Z0-9])*',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws(-[^:]+)?:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:entity-recognizer-endpoint/[a-zA-Z0-9](-*[a-zA-Z0-9])*',
        max_length=256,
    )


class EntityRecognizerEvaluationMetrics(BaseModel):
    F1Score: Optional[Double] = None
    Precision: Optional[Double] = None
    Recall: Optional[Double] = None


class EntityType(Enum):
    PERSON = 'PERSON'
    LOCATION = 'LOCATION'
    ORGANIZATION = 'ORGANIZATION'
    COMMERCIAL_ITEM = 'COMMERCIAL_ITEM'
    EVENT = 'EVENT'
    DATE = 'DATE'
    QUANTITY = 'QUANTITY'
    TITLE = 'TITLE'
    OTHER = 'OTHER'


class EntityTypeName(
    RootModel[constr(pattern=r'^(?![^\n\r\t,]*\\n|\\r|\\t)[^\n\r\t,]+$', max_length=64)]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?![^\n\r\t,]*\\n|\\r|\\t)[^\n\r\t,]+$', max_length=64)


class EntityTypesEvaluationMetrics(BaseModel):
    F1Score: Optional[Double] = None
    Precision: Optional[Double] = None
    Recall: Optional[Double] = None


class EntityTypesListItem(BaseModel):
    Type: EntityTypeName


class EventTypeString(
    RootModel[constr(pattern=r'[A-Z_]*', min_length=1, max_length=40)]
):
    root: constr(pattern=r'[A-Z_]*', min_length=1, max_length=40)


class Float(RootModel[float]):
    root: float


class FlywheelIterationId(
    RootModel[constr(pattern=r'[0-9]{8}T[0-9]{6}Z', max_length=63)]
):
    root: constr(pattern=r'[0-9]{8}T[0-9]{6}Z', max_length=63)


class FlywheelIterationStatus(Enum):
    TRAINING = 'TRAINING'
    EVALUATING = 'EVALUATING'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'
    STOP_REQUESTED = 'STOP_REQUESTED'
    STOPPED = 'STOPPED'


class FlywheelModelEvaluationMetrics(BaseModel):
    AverageAccuracy: Optional[Double] = None
    AverageF1Score: Optional[Double] = None
    AveragePrecision: Optional[Double] = None
    AverageRecall: Optional[Double] = None


class FlywheelS3Uri(
    RootModel[
        constr(pattern=r's3://[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9](/.*)?', max_length=512)
    ]
):
    root: constr(
        pattern=r's3://[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9](/.*)?', max_length=512
    )


class FlywheelStatus(Enum):
    CREATING = 'CREATING'
    ACTIVE = 'ACTIVE'
    UPDATING = 'UPDATING'
    DELETING = 'DELETING'
    FAILED = 'FAILED'


class IamRoleArn(
    RootModel[
        constr(
            pattern=r'arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+',
        min_length=20,
        max_length=2048,
    )


class ImportModelResponse(BaseModel):
    ModelArn: Optional[ComprehendModelArn] = None


class InferenceUnitsInteger(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class InputFormat(Enum):
    ONE_DOC_PER_FILE = 'ONE_DOC_PER_FILE'
    ONE_DOC_PER_LINE = 'ONE_DOC_PER_LINE'


class Integer(RootModel[int]):
    root: int


class InternalServerException(RootModel[Any]):
    root: Any


class InvalidFilterException(RootModel[Any]):
    root: Any


class InvalidRequestException(RootModel[Any]):
    root: Any


class JobId(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$', min_length=1, max_length=32)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$', min_length=1, max_length=32
    )


class JobName(
    RootModel[
        constr(
            pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$', min_length=1, max_length=256
        )
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$', min_length=1, max_length=256
    )


class JobNotFoundException(RootModel[Any]):
    root: Any


class JobStatus(Enum):
    SUBMITTED = 'SUBMITTED'
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'
    STOP_REQUESTED = 'STOP_REQUESTED'
    STOPPED = 'STOPPED'


class KmsKeyId(RootModel[constr(pattern=r'^\p{ASCII}+$', max_length=2048)]):
    root: constr(pattern=r'^\p{ASCII}+$', max_length=2048)


class KmsKeyValidationException(RootModel[Any]):
    root: Any


class LabelDelimiter(
    RootModel[
        constr(pattern=r'^[ ~!@#$%^*\-_+=|\\:;\t>?/]$', min_length=1, max_length=1)
    ]
):
    root: constr(pattern=r'^[ ~!@#$%^*\-_+=|\\:;\t>?/]$', min_length=1, max_length=1)


class LabelListItem(RootModel[constr(pattern=r'^\P{C}*$', max_length=5000)]):
    root: constr(pattern=r'^\P{C}*$', max_length=5000)


class LabelsList(RootModel[List[LabelListItem]]):
    root: List[LabelListItem] = Field(..., max_length=1000)


class LanguageCode(Enum):
    en = 'en'
    es = 'es'
    fr = 'fr'
    de = 'de'
    it = 'it'
    pt = 'pt'
    ar = 'ar'
    hi = 'hi'
    ja = 'ja'
    ko = 'ko'
    zh = 'zh'
    zh_TW = 'zh-TW'


class ListOfDescriptiveMentionIndices(RootModel[List[Integer]]):
    root: List[Integer]


class ListOfDocumentReadFeatureTypes(RootModel[List[DocumentReadFeatureTypes]]):
    root: List[DocumentReadFeatureTypes] = Field(..., max_length=2, min_length=1)


class ListTagsForResourceRequest(BaseModel):
    ResourceArn: ComprehendArn


class MaskCharacter(
    RootModel[constr(pattern=r'[!@#$%&*]', min_length=1, max_length=1)]
):
    root: constr(pattern=r'[!@#$%&*]', min_length=1, max_length=1)


class MaxResultsInteger(RootModel[conint(ge=1, le=500)]):
    root: conint(ge=1, le=500)


class ModelStatus(Enum):
    SUBMITTED = 'SUBMITTED'
    TRAINING = 'TRAINING'
    DELETING = 'DELETING'
    STOP_REQUESTED = 'STOP_REQUESTED'
    STOPPED = 'STOPPED'
    IN_ERROR = 'IN_ERROR'
    TRAINED = 'TRAINED'
    TRAINED_WITH_WARNING = 'TRAINED_WITH_WARNING'


class ModelType(Enum):
    DOCUMENT_CLASSIFIER = 'DOCUMENT_CLASSIFIER'
    ENTITY_RECOGNIZER = 'ENTITY_RECOGNIZER'


class NumberOfDocuments(RootModel[int]):
    root: int


class NumberOfTopicsInteger(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class PageBasedErrorCode(Enum):
    TEXTRACT_BAD_PAGE = 'TEXTRACT_BAD_PAGE'
    TEXTRACT_PROVISIONED_THROUGHPUT_EXCEEDED = (
        'TEXTRACT_PROVISIONED_THROUGHPUT_EXCEEDED'
    )
    PAGE_CHARACTERS_EXCEEDED = 'PAGE_CHARACTERS_EXCEEDED'
    PAGE_SIZE_EXCEEDED = 'PAGE_SIZE_EXCEEDED'
    INTERNAL_SERVER_ERROR = 'INTERNAL_SERVER_ERROR'


class PageBasedWarningCode(Enum):
    INFERENCING_PLAINTEXT_WITH_NATIVE_TRAINED_MODEL = (
        'INFERENCING_PLAINTEXT_WITH_NATIVE_TRAINED_MODEL'
    )
    INFERENCING_NATIVE_DOCUMENT_WITH_PLAINTEXT_TRAINED_MODEL = (
        'INFERENCING_NATIVE_DOCUMENT_WITH_PLAINTEXT_TRAINED_MODEL'
    )


class PartOfSpeechTagType(Enum):
    ADJ = 'ADJ'
    ADP = 'ADP'
    ADV = 'ADV'
    AUX = 'AUX'
    CONJ = 'CONJ'
    CCONJ = 'CCONJ'
    DET = 'DET'
    INTJ = 'INTJ'
    NOUN = 'NOUN'
    NUM = 'NUM'
    O = 'O'
    PART = 'PART'
    PRON = 'PRON'
    PROPN = 'PROPN'
    PUNCT = 'PUNCT'
    SCONJ = 'SCONJ'
    SYM = 'SYM'
    VERB = 'VERB'


class PiiEntitiesDetectionMaskMode(Enum):
    MASK = 'MASK'
    REPLACE_WITH_PII_ENTITY_TYPE = 'REPLACE_WITH_PII_ENTITY_TYPE'


class PiiEntitiesDetectionMode(Enum):
    ONLY_REDACTION = 'ONLY_REDACTION'
    ONLY_OFFSETS = 'ONLY_OFFSETS'


class PiiEntityType(Enum):
    BANK_ACCOUNT_NUMBER = 'BANK_ACCOUNT_NUMBER'
    BANK_ROUTING = 'BANK_ROUTING'
    CREDIT_DEBIT_NUMBER = 'CREDIT_DEBIT_NUMBER'
    CREDIT_DEBIT_CVV = 'CREDIT_DEBIT_CVV'
    CREDIT_DEBIT_EXPIRY = 'CREDIT_DEBIT_EXPIRY'
    PIN = 'PIN'
    EMAIL = 'EMAIL'
    ADDRESS = 'ADDRESS'
    NAME = 'NAME'
    PHONE = 'PHONE'
    SSN = 'SSN'
    DATE_TIME = 'DATE_TIME'
    PASSPORT_NUMBER = 'PASSPORT_NUMBER'
    DRIVER_ID = 'DRIVER_ID'
    URL = 'URL'
    AGE = 'AGE'
    USERNAME = 'USERNAME'
    PASSWORD = 'PASSWORD'
    AWS_ACCESS_KEY = 'AWS_ACCESS_KEY'
    AWS_SECRET_KEY = 'AWS_SECRET_KEY'
    IP_ADDRESS = 'IP_ADDRESS'
    MAC_ADDRESS = 'MAC_ADDRESS'
    ALL = 'ALL'
    LICENSE_PLATE = 'LICENSE_PLATE'
    VEHICLE_IDENTIFICATION_NUMBER = 'VEHICLE_IDENTIFICATION_NUMBER'
    UK_NATIONAL_INSURANCE_NUMBER = 'UK_NATIONAL_INSURANCE_NUMBER'
    CA_SOCIAL_INSURANCE_NUMBER = 'CA_SOCIAL_INSURANCE_NUMBER'
    US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER = 'US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER'
    UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER = 'UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER'
    IN_PERMANENT_ACCOUNT_NUMBER = 'IN_PERMANENT_ACCOUNT_NUMBER'
    IN_NREGA = 'IN_NREGA'
    INTERNATIONAL_BANK_ACCOUNT_NUMBER = 'INTERNATIONAL_BANK_ACCOUNT_NUMBER'
    SWIFT_CODE = 'SWIFT_CODE'
    UK_NATIONAL_HEALTH_SERVICE_NUMBER = 'UK_NATIONAL_HEALTH_SERVICE_NUMBER'
    CA_HEALTH_NUMBER = 'CA_HEALTH_NUMBER'
    IN_AADHAAR = 'IN_AADHAAR'
    IN_VOTER_NUMBER = 'IN_VOTER_NUMBER'


class Point(BaseModel):
    X: Optional[Float] = None
    Y: Optional[Float] = None


class Policy(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u00FF]+',
            min_length=1,
            max_length=20000,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u00FF]+', min_length=1, max_length=20000
    )


class PolicyRevisionId(RootModel[constr(pattern=r'[0-9A-Fa-f]+', max_length=64)]):
    root: constr(pattern=r'[0-9A-Fa-f]+', max_length=64)


class Polygon(RootModel[List[Point]]):
    root: List[Point]


class PutResourcePolicyRequest(BaseModel):
    PolicyRevisionId_1: Optional[PolicyRevisionId] = Field(
        None, alias='PolicyRevisionId'
    )
    ResourceArn: ComprehendModelArn
    ResourcePolicy: Policy


class PutResourcePolicyResponse(BaseModel):
    PolicyRevisionId_1: Optional[PolicyRevisionId] = Field(
        None, alias='PolicyRevisionId'
    )


class RelationshipType(Enum):
    CHILD = 'CHILD'


class ResourceInUseException(RootModel[Any]):
    root: Any


class ResourceLimitExceededException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResourceUnavailableException(RootModel[Any]):
    root: Any


class S3Uri(
    RootModel[
        constr(
            pattern=r's3://[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9](/.*)?', max_length=1024
        )
    ]
):
    root: constr(
        pattern=r's3://[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9](/.*)?', max_length=1024
    )


class SecurityGroupId(
    RootModel[constr(pattern=r'[-0-9a-zA-Z]+', min_length=1, max_length=32)]
):
    root: constr(pattern=r'[-0-9a-zA-Z]+', min_length=1, max_length=32)


class SecurityGroupIds(RootModel[List[SecurityGroupId]]):
    root: List[SecurityGroupId] = Field(..., max_length=5, min_length=1)


class SemiStructuredDocumentBlob(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class SentimentScore(BaseModel):
    Mixed: Optional[Float] = None
    Negative: Optional[Float] = None
    Neutral: Optional[Float] = None
    Positive: Optional[Float] = None


class SentimentType(Enum):
    POSITIVE = 'POSITIVE'
    NEGATIVE = 'NEGATIVE'
    NEUTRAL = 'NEUTRAL'
    MIXED = 'MIXED'


class Split(Enum):
    TRAIN = 'TRAIN'
    TEST = 'TEST'


class StartDocumentClassificationJobResponse(BaseModel):
    DocumentClassifierArn_1: Optional[DocumentClassifierArn] = Field(
        None, alias='DocumentClassifierArn'
    )
    JobArn: Optional[ComprehendArn] = None
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')


class StartDominantLanguageDetectionJobResponse(BaseModel):
    JobArn: Optional[ComprehendArn] = None
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')


class StartEntitiesDetectionJobResponse(BaseModel):
    EntityRecognizerArn_1: Optional[EntityRecognizerArn] = Field(
        None, alias='EntityRecognizerArn'
    )
    JobArn: Optional[ComprehendArn] = None
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')


class StartEventsDetectionJobResponse(BaseModel):
    JobArn: Optional[ComprehendArn] = None
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')


class StartFlywheelIterationRequest(BaseModel):
    ClientRequestToken: Optional[ClientRequestTokenString] = None
    FlywheelArn: ComprehendFlywheelArn


class StartFlywheelIterationResponse(BaseModel):
    FlywheelArn: Optional[ComprehendFlywheelArn] = None
    FlywheelIterationId_1: Optional[FlywheelIterationId] = Field(
        None, alias='FlywheelIterationId'
    )


class StartKeyPhrasesDetectionJobResponse(BaseModel):
    JobArn: Optional[ComprehendArn] = None
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')


class StartPiiEntitiesDetectionJobResponse(BaseModel):
    JobArn: Optional[ComprehendArn] = None
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')


class StartSentimentDetectionJobResponse(BaseModel):
    JobArn: Optional[ComprehendArn] = None
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')


class StartTargetedSentimentDetectionJobResponse(BaseModel):
    JobArn: Optional[ComprehendArn] = None
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')


class StartTopicsDetectionJobResponse(BaseModel):
    JobArn: Optional[ComprehendArn] = None
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')


class StopDominantLanguageDetectionJobRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')


class StopDominantLanguageDetectionJobResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')


class StopEntitiesDetectionJobRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')


class StopEntitiesDetectionJobResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')


class StopEventsDetectionJobRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')


class StopEventsDetectionJobResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')


class StopKeyPhrasesDetectionJobRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')


class StopKeyPhrasesDetectionJobResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')


class StopPiiEntitiesDetectionJobRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')


class StopPiiEntitiesDetectionJobResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')


class StopSentimentDetectionJobRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')


class StopSentimentDetectionJobResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')


class StopTargetedSentimentDetectionJobRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')


class StopTargetedSentimentDetectionJobResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')


class StopTrainingDocumentClassifierRequest(BaseModel):
    DocumentClassifierArn_1: DocumentClassifierArn = Field(
        ..., alias='DocumentClassifierArn'
    )


class StopTrainingDocumentClassifierResponse(BaseModel):
    pass


class StopTrainingEntityRecognizerRequest(BaseModel):
    EntityRecognizerArn_1: EntityRecognizerArn = Field(..., alias='EntityRecognizerArn')


class StopTrainingEntityRecognizerResponse(BaseModel):
    pass


class String(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class StringList(RootModel[List[String]]):
    root: List[String]


class SubnetId(
    RootModel[constr(pattern=r'[-0-9a-zA-Z]+', min_length=1, max_length=32)]
):
    root: constr(pattern=r'[-0-9a-zA-Z]+', min_length=1, max_length=32)


class Subnets(RootModel[List[SubnetId]]):
    root: List[SubnetId] = Field(..., max_length=16, min_length=1)


class SyntaxLanguageCode(Enum):
    en = 'en'
    es = 'es'
    fr = 'fr'
    de = 'de'
    it = 'it'
    pt = 'pt'


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey]


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class TargetEventTypes(RootModel[List[EventTypeString]]):
    root: List[EventTypeString] = Field(..., min_length=1)


class TargetedSentimentEntityType(Enum):
    PERSON = 'PERSON'
    LOCATION = 'LOCATION'
    ORGANIZATION = 'ORGANIZATION'
    FACILITY = 'FACILITY'
    BRAND = 'BRAND'
    COMMERCIAL_ITEM = 'COMMERCIAL_ITEM'
    MOVIE = 'MOVIE'
    MUSIC = 'MUSIC'
    BOOK = 'BOOK'
    SOFTWARE = 'SOFTWARE'
    GAME = 'GAME'
    PERSONAL_TITLE = 'PERSONAL_TITLE'
    EVENT = 'EVENT'
    DATE = 'DATE'
    QUANTITY = 'QUANTITY'
    ATTRIBUTE = 'ATTRIBUTE'
    OTHER = 'OTHER'


class TextSizeLimitExceededException(RootModel[Any]):
    root: Any


class Timestamp(RootModel[datetime]):
    root: datetime


class TooManyRequestsException(RootModel[Any]):
    root: Any


class TooManyTagKeysException(RootModel[Any]):
    root: Any


class TooManyTagsException(RootModel[Any]):
    root: Any


class TopicsDetectionJobFilter(BaseModel):
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    SubmitTimeAfter: Optional[Timestamp] = None
    SubmitTimeBefore: Optional[Timestamp] = None


class UnsupportedLanguageException(RootModel[Any]):
    root: Any


class UntagResourceRequest(BaseModel):
    ResourceArn: ComprehendArn
    TagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class UpdateEndpointRequest(BaseModel):
    DesiredDataAccessRoleArn: Optional[IamRoleArn] = None
    DesiredInferenceUnits: Optional[InferenceUnitsInteger] = None
    DesiredModelArn: Optional[ComprehendModelArn] = None
    EndpointArn: ComprehendEndpointArn
    FlywheelArn: Optional[ComprehendFlywheelArn] = None


class UpdateEndpointResponse(BaseModel):
    DesiredModelArn: Optional[ComprehendModelArn] = None


class VersionName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*$', max_length=63)]
):
    root: constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*$', max_length=63)


class VpcConfig(BaseModel):
    SecurityGroupIds_1: SecurityGroupIds = Field(..., alias='SecurityGroupIds')
    Subnets_1: Subnets = Field(..., alias='Subnets')


class WarningsListItem(BaseModel):
    Page: Optional[Integer] = None
    WarnCode: Optional[PageBasedWarningCode] = None
    WarnMessage: Optional[String] = None


class XAmzTarget(Enum):
    Comprehend_20171127_BatchDetectDominantLanguage = (
        'Comprehend_20171127.BatchDetectDominantLanguage'
    )


class XAmzTarget1(Enum):
    Comprehend_20171127_BatchDetectEntities = 'Comprehend_20171127.BatchDetectEntities'


class XAmzTarget2(Enum):
    Comprehend_20171127_BatchDetectKeyPhrases = (
        'Comprehend_20171127.BatchDetectKeyPhrases'
    )


class XAmzTarget3(Enum):
    Comprehend_20171127_BatchDetectSentiment = (
        'Comprehend_20171127.BatchDetectSentiment'
    )


class XAmzTarget4(Enum):
    Comprehend_20171127_BatchDetectSyntax = 'Comprehend_20171127.BatchDetectSyntax'


class XAmzTarget5(Enum):
    Comprehend_20171127_BatchDetectTargetedSentiment = (
        'Comprehend_20171127.BatchDetectTargetedSentiment'
    )


class XAmzTarget6(Enum):
    Comprehend_20171127_ClassifyDocument = 'Comprehend_20171127.ClassifyDocument'


class XAmzTarget7(Enum):
    Comprehend_20171127_ContainsPiiEntities = 'Comprehend_20171127.ContainsPiiEntities'


class XAmzTarget8(Enum):
    Comprehend_20171127_CreateDataset = 'Comprehend_20171127.CreateDataset'


class XAmzTarget9(Enum):
    Comprehend_20171127_CreateDocumentClassifier = (
        'Comprehend_20171127.CreateDocumentClassifier'
    )


class XAmzTarget10(Enum):
    Comprehend_20171127_CreateEndpoint = 'Comprehend_20171127.CreateEndpoint'


class XAmzTarget11(Enum):
    Comprehend_20171127_CreateEntityRecognizer = (
        'Comprehend_20171127.CreateEntityRecognizer'
    )


class XAmzTarget12(Enum):
    Comprehend_20171127_CreateFlywheel = 'Comprehend_20171127.CreateFlywheel'


class XAmzTarget13(Enum):
    Comprehend_20171127_DeleteDocumentClassifier = (
        'Comprehend_20171127.DeleteDocumentClassifier'
    )


class XAmzTarget14(Enum):
    Comprehend_20171127_DeleteEndpoint = 'Comprehend_20171127.DeleteEndpoint'


class XAmzTarget15(Enum):
    Comprehend_20171127_DeleteEntityRecognizer = (
        'Comprehend_20171127.DeleteEntityRecognizer'
    )


class XAmzTarget16(Enum):
    Comprehend_20171127_DeleteFlywheel = 'Comprehend_20171127.DeleteFlywheel'


class XAmzTarget17(Enum):
    Comprehend_20171127_DeleteResourcePolicy = (
        'Comprehend_20171127.DeleteResourcePolicy'
    )


class XAmzTarget18(Enum):
    Comprehend_20171127_DescribeDataset = 'Comprehend_20171127.DescribeDataset'


class XAmzTarget19(Enum):
    Comprehend_20171127_DescribeDocumentClassificationJob = (
        'Comprehend_20171127.DescribeDocumentClassificationJob'
    )


class XAmzTarget20(Enum):
    Comprehend_20171127_DescribeDocumentClassifier = (
        'Comprehend_20171127.DescribeDocumentClassifier'
    )


class XAmzTarget21(Enum):
    Comprehend_20171127_DescribeDominantLanguageDetectionJob = (
        'Comprehend_20171127.DescribeDominantLanguageDetectionJob'
    )


class XAmzTarget22(Enum):
    Comprehend_20171127_DescribeEndpoint = 'Comprehend_20171127.DescribeEndpoint'


class XAmzTarget23(Enum):
    Comprehend_20171127_DescribeEntitiesDetectionJob = (
        'Comprehend_20171127.DescribeEntitiesDetectionJob'
    )


class XAmzTarget24(Enum):
    Comprehend_20171127_DescribeEntityRecognizer = (
        'Comprehend_20171127.DescribeEntityRecognizer'
    )


class XAmzTarget25(Enum):
    Comprehend_20171127_DescribeEventsDetectionJob = (
        'Comprehend_20171127.DescribeEventsDetectionJob'
    )


class XAmzTarget26(Enum):
    Comprehend_20171127_DescribeFlywheel = 'Comprehend_20171127.DescribeFlywheel'


class XAmzTarget27(Enum):
    Comprehend_20171127_DescribeFlywheelIteration = (
        'Comprehend_20171127.DescribeFlywheelIteration'
    )


class XAmzTarget28(Enum):
    Comprehend_20171127_DescribeKeyPhrasesDetectionJob = (
        'Comprehend_20171127.DescribeKeyPhrasesDetectionJob'
    )


class XAmzTarget29(Enum):
    Comprehend_20171127_DescribePiiEntitiesDetectionJob = (
        'Comprehend_20171127.DescribePiiEntitiesDetectionJob'
    )


class XAmzTarget30(Enum):
    Comprehend_20171127_DescribeResourcePolicy = (
        'Comprehend_20171127.DescribeResourcePolicy'
    )


class XAmzTarget31(Enum):
    Comprehend_20171127_DescribeSentimentDetectionJob = (
        'Comprehend_20171127.DescribeSentimentDetectionJob'
    )


class XAmzTarget32(Enum):
    Comprehend_20171127_DescribeTargetedSentimentDetectionJob = (
        'Comprehend_20171127.DescribeTargetedSentimentDetectionJob'
    )


class XAmzTarget33(Enum):
    Comprehend_20171127_DescribeTopicsDetectionJob = (
        'Comprehend_20171127.DescribeTopicsDetectionJob'
    )


class XAmzTarget34(Enum):
    Comprehend_20171127_DetectDominantLanguage = (
        'Comprehend_20171127.DetectDominantLanguage'
    )


class XAmzTarget35(Enum):
    Comprehend_20171127_DetectEntities = 'Comprehend_20171127.DetectEntities'


class XAmzTarget36(Enum):
    Comprehend_20171127_DetectKeyPhrases = 'Comprehend_20171127.DetectKeyPhrases'


class XAmzTarget37(Enum):
    Comprehend_20171127_DetectPiiEntities = 'Comprehend_20171127.DetectPiiEntities'


class XAmzTarget38(Enum):
    Comprehend_20171127_DetectSentiment = 'Comprehend_20171127.DetectSentiment'


class XAmzTarget39(Enum):
    Comprehend_20171127_DetectSyntax = 'Comprehend_20171127.DetectSyntax'


class XAmzTarget40(Enum):
    Comprehend_20171127_DetectTargetedSentiment = (
        'Comprehend_20171127.DetectTargetedSentiment'
    )


class XAmzTarget41(Enum):
    Comprehend_20171127_ImportModel = 'Comprehend_20171127.ImportModel'


class XAmzTarget42(Enum):
    Comprehend_20171127_ListDatasets = 'Comprehend_20171127.ListDatasets'


class XAmzTarget43(Enum):
    Comprehend_20171127_ListDocumentClassificationJobs = (
        'Comprehend_20171127.ListDocumentClassificationJobs'
    )


class XAmzTarget44(Enum):
    Comprehend_20171127_ListDocumentClassifierSummaries = (
        'Comprehend_20171127.ListDocumentClassifierSummaries'
    )


class XAmzTarget45(Enum):
    Comprehend_20171127_ListDocumentClassifiers = (
        'Comprehend_20171127.ListDocumentClassifiers'
    )


class XAmzTarget46(Enum):
    Comprehend_20171127_ListDominantLanguageDetectionJobs = (
        'Comprehend_20171127.ListDominantLanguageDetectionJobs'
    )


class XAmzTarget47(Enum):
    Comprehend_20171127_ListEndpoints = 'Comprehend_20171127.ListEndpoints'


class XAmzTarget48(Enum):
    Comprehend_20171127_ListEntitiesDetectionJobs = (
        'Comprehend_20171127.ListEntitiesDetectionJobs'
    )


class XAmzTarget49(Enum):
    Comprehend_20171127_ListEntityRecognizerSummaries = (
        'Comprehend_20171127.ListEntityRecognizerSummaries'
    )


class XAmzTarget50(Enum):
    Comprehend_20171127_ListEntityRecognizers = (
        'Comprehend_20171127.ListEntityRecognizers'
    )


class XAmzTarget51(Enum):
    Comprehend_20171127_ListEventsDetectionJobs = (
        'Comprehend_20171127.ListEventsDetectionJobs'
    )


class XAmzTarget52(Enum):
    Comprehend_20171127_ListFlywheelIterationHistory = (
        'Comprehend_20171127.ListFlywheelIterationHistory'
    )


class XAmzTarget53(Enum):
    Comprehend_20171127_ListFlywheels = 'Comprehend_20171127.ListFlywheels'


class XAmzTarget54(Enum):
    Comprehend_20171127_ListKeyPhrasesDetectionJobs = (
        'Comprehend_20171127.ListKeyPhrasesDetectionJobs'
    )


class XAmzTarget55(Enum):
    Comprehend_20171127_ListPiiEntitiesDetectionJobs = (
        'Comprehend_20171127.ListPiiEntitiesDetectionJobs'
    )


class XAmzTarget56(Enum):
    Comprehend_20171127_ListSentimentDetectionJobs = (
        'Comprehend_20171127.ListSentimentDetectionJobs'
    )


class XAmzTarget57(Enum):
    Comprehend_20171127_ListTagsForResource = 'Comprehend_20171127.ListTagsForResource'


class XAmzTarget58(Enum):
    Comprehend_20171127_ListTargetedSentimentDetectionJobs = (
        'Comprehend_20171127.ListTargetedSentimentDetectionJobs'
    )


class XAmzTarget59(Enum):
    Comprehend_20171127_ListTopicsDetectionJobs = (
        'Comprehend_20171127.ListTopicsDetectionJobs'
    )


class XAmzTarget60(Enum):
    Comprehend_20171127_PutResourcePolicy = 'Comprehend_20171127.PutResourcePolicy'


class XAmzTarget61(Enum):
    Comprehend_20171127_StartDocumentClassificationJob = (
        'Comprehend_20171127.StartDocumentClassificationJob'
    )


class XAmzTarget62(Enum):
    Comprehend_20171127_StartDominantLanguageDetectionJob = (
        'Comprehend_20171127.StartDominantLanguageDetectionJob'
    )


class XAmzTarget63(Enum):
    Comprehend_20171127_StartEntitiesDetectionJob = (
        'Comprehend_20171127.StartEntitiesDetectionJob'
    )


class XAmzTarget64(Enum):
    Comprehend_20171127_StartEventsDetectionJob = (
        'Comprehend_20171127.StartEventsDetectionJob'
    )


class XAmzTarget65(Enum):
    Comprehend_20171127_StartFlywheelIteration = (
        'Comprehend_20171127.StartFlywheelIteration'
    )


class XAmzTarget66(Enum):
    Comprehend_20171127_StartKeyPhrasesDetectionJob = (
        'Comprehend_20171127.StartKeyPhrasesDetectionJob'
    )


class XAmzTarget67(Enum):
    Comprehend_20171127_StartPiiEntitiesDetectionJob = (
        'Comprehend_20171127.StartPiiEntitiesDetectionJob'
    )


class XAmzTarget68(Enum):
    Comprehend_20171127_StartSentimentDetectionJob = (
        'Comprehend_20171127.StartSentimentDetectionJob'
    )


class XAmzTarget69(Enum):
    Comprehend_20171127_StartTargetedSentimentDetectionJob = (
        'Comprehend_20171127.StartTargetedSentimentDetectionJob'
    )


class XAmzTarget70(Enum):
    Comprehend_20171127_StartTopicsDetectionJob = (
        'Comprehend_20171127.StartTopicsDetectionJob'
    )


class XAmzTarget71(Enum):
    Comprehend_20171127_StopDominantLanguageDetectionJob = (
        'Comprehend_20171127.StopDominantLanguageDetectionJob'
    )


class XAmzTarget72(Enum):
    Comprehend_20171127_StopEntitiesDetectionJob = (
        'Comprehend_20171127.StopEntitiesDetectionJob'
    )


class XAmzTarget73(Enum):
    Comprehend_20171127_StopEventsDetectionJob = (
        'Comprehend_20171127.StopEventsDetectionJob'
    )


class XAmzTarget74(Enum):
    Comprehend_20171127_StopKeyPhrasesDetectionJob = (
        'Comprehend_20171127.StopKeyPhrasesDetectionJob'
    )


class XAmzTarget75(Enum):
    Comprehend_20171127_StopPiiEntitiesDetectionJob = (
        'Comprehend_20171127.StopPiiEntitiesDetectionJob'
    )


class XAmzTarget76(Enum):
    Comprehend_20171127_StopSentimentDetectionJob = (
        'Comprehend_20171127.StopSentimentDetectionJob'
    )


class XAmzTarget77(Enum):
    Comprehend_20171127_StopTargetedSentimentDetectionJob = (
        'Comprehend_20171127.StopTargetedSentimentDetectionJob'
    )


class XAmzTarget78(Enum):
    Comprehend_20171127_StopTrainingDocumentClassifier = (
        'Comprehend_20171127.StopTrainingDocumentClassifier'
    )


class XAmzTarget79(Enum):
    Comprehend_20171127_StopTrainingEntityRecognizer = (
        'Comprehend_20171127.StopTrainingEntityRecognizer'
    )


class XAmzTarget80(Enum):
    Comprehend_20171127_TagResource = 'Comprehend_20171127.TagResource'


class XAmzTarget81(Enum):
    Comprehend_20171127_UntagResource = 'Comprehend_20171127.UntagResource'


class XAmzTarget82(Enum):
    Comprehend_20171127_UpdateEndpoint = 'Comprehend_20171127.UpdateEndpoint'


class XAmzTarget83(Enum):
    Comprehend_20171127_UpdateFlywheel = 'Comprehend_20171127.UpdateFlywheel'


class AttributeNamesList(RootModel[List[AttributeNamesListItem]]):
    root: List[AttributeNamesListItem]


class AugmentedManifestsListItem(BaseModel):
    AnnotationDataS3Uri: Optional[S3Uri] = None
    AttributeNames: AttributeNamesList
    DocumentType: Optional[AugmentedManifestsDocumentTypeFormat] = None
    S3Uri_1: S3Uri = Field(..., alias='S3Uri')
    SourceDocumentsS3Uri: Optional[S3Uri] = None
    Split_1: Optional[Split] = Field(None, alias='Split')


class BatchDetectDominantLanguageRequest(BaseModel):
    TextList: CustomerInputStringList


class BatchDetectEntitiesRequest(BaseModel):
    LanguageCode_1: LanguageCode = Field(..., alias='LanguageCode')
    TextList: CustomerInputStringList


class BatchDetectKeyPhrasesRequest(BaseModel):
    LanguageCode_1: LanguageCode = Field(..., alias='LanguageCode')
    TextList: CustomerInputStringList


class BatchDetectSentimentItemResult(BaseModel):
    Index: Optional[Integer] = None
    Sentiment: Optional[SentimentType] = None
    SentimentScore_1: Optional[SentimentScore] = Field(None, alias='SentimentScore')


class BatchDetectSentimentRequest(BaseModel):
    LanguageCode_1: LanguageCode = Field(..., alias='LanguageCode')
    TextList: CustomerInputStringList


class BatchDetectSyntaxRequest(BaseModel):
    LanguageCode: SyntaxLanguageCode
    TextList: CustomerInputStringList


class BatchDetectTargetedSentimentRequest(BaseModel):
    LanguageCode_1: LanguageCode = Field(..., alias='LanguageCode')
    TextList: CustomerInputStringList


class BatchItemError(BaseModel):
    ErrorCode: Optional[String] = None
    ErrorMessage: Optional[String] = None
    Index: Optional[Integer] = None


class BatchItemErrorList(RootModel[List[BatchItemError]]):
    root: List[BatchItemError]


class BoundingBox(BaseModel):
    Height: Optional[Float] = None
    Left: Optional[Float] = None
    Top: Optional[Float] = None
    Width: Optional[Float] = None


class ChildBlock(BaseModel):
    BeginOffset: Optional[Integer] = None
    ChildBlockId: Optional[String] = None
    EndOffset: Optional[Integer] = None


class ClassifierEvaluationMetrics(BaseModel):
    Accuracy: Optional[Double] = None
    F1Score: Optional[Double] = None
    HammingLoss: Optional[Double] = None
    MicroF1Score: Optional[Double] = None
    MicroPrecision: Optional[Double] = None
    MicroRecall: Optional[Double] = None
    Precision: Optional[Double] = None
    Recall: Optional[Double] = None


class ClassifierMetadata(BaseModel):
    EvaluationMetrics: Optional[ClassifierEvaluationMetrics] = None
    NumberOfLabels: Optional[Integer] = None
    NumberOfTestDocuments: Optional[Integer] = None
    NumberOfTrainedDocuments: Optional[Integer] = None


class ContainsPiiEntitiesRequest(BaseModel):
    LanguageCode_1: LanguageCode = Field(..., alias='LanguageCode')
    Text: String


class CreateDocumentClassifierResponse(BaseModel):
    DocumentClassifierArn_1: Optional[DocumentClassifierArn] = Field(
        None, alias='DocumentClassifierArn'
    )


class CreateEntityRecognizerResponse(BaseModel):
    EntityRecognizerArn_1: Optional[EntityRecognizerArn] = Field(
        None, alias='EntityRecognizerArn'
    )


class DataSecurityConfig(BaseModel):
    DataLakeKmsKeyId: Optional[KmsKeyId] = None
    ModelKmsKeyId: Optional[KmsKeyId] = None
    VolumeKmsKeyId: Optional[KmsKeyId] = None
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class DatasetAugmentedManifestsListItem(BaseModel):
    AnnotationDataS3Uri: Optional[S3Uri] = None
    AttributeNames: AttributeNamesList
    DocumentType: Optional[AugmentedManifestsDocumentTypeFormat] = None
    S3Uri_1: S3Uri = Field(..., alias='S3Uri')
    SourceDocumentsS3Uri: Optional[S3Uri] = None


class DatasetDocumentClassifierInputDataConfig(BaseModel):
    LabelDelimiter_1: Optional[LabelDelimiter] = Field(None, alias='LabelDelimiter')
    S3Uri_1: S3Uri = Field(..., alias='S3Uri')


class DatasetEntityRecognizerAnnotations(BaseModel):
    S3Uri_1: S3Uri = Field(..., alias='S3Uri')


class DatasetEntityRecognizerDocuments(BaseModel):
    InputFormat_1: Optional[InputFormat] = Field(None, alias='InputFormat')
    S3Uri_1: S3Uri = Field(..., alias='S3Uri')


class DatasetEntityRecognizerEntityList(BaseModel):
    S3Uri_1: S3Uri = Field(..., alias='S3Uri')


class DatasetEntityRecognizerInputDataConfig(BaseModel):
    Annotations: Optional[DatasetEntityRecognizerAnnotations] = None
    Documents: DatasetEntityRecognizerDocuments
    EntityList: Optional[DatasetEntityRecognizerEntityList] = None


class DatasetFilter(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    DatasetType_1: Optional[DatasetType] = Field(None, alias='DatasetType')
    Status: Optional[DatasetStatus] = None


class DatasetProperties(BaseModel):
    CreationTime: Optional[Timestamp] = None
    DatasetArn: Optional[ComprehendDatasetArn] = None
    DatasetName: Optional[ComprehendArnName] = None
    DatasetS3Uri: Optional[S3Uri] = None
    DatasetType_1: Optional[DatasetType] = Field(None, alias='DatasetType')
    Description_1: Optional[Description] = Field(None, alias='Description')
    EndTime: Optional[Timestamp] = None
    Message: Optional[AnyLengthString] = None
    NumberOfDocuments_1: Optional[NumberOfDocuments] = Field(
        None, alias='NumberOfDocuments'
    )
    Status: Optional[DatasetStatus] = None


class DatasetPropertiesList(RootModel[List[DatasetProperties]]):
    root: List[DatasetProperties]


class DeleteDocumentClassifierRequest(BaseModel):
    DocumentClassifierArn_1: DocumentClassifierArn = Field(
        ..., alias='DocumentClassifierArn'
    )


class DeleteEntityRecognizerRequest(BaseModel):
    EntityRecognizerArn_1: EntityRecognizerArn = Field(..., alias='EntityRecognizerArn')


class DeleteResourcePolicyRequest(BaseModel):
    PolicyRevisionId_1: Optional[PolicyRevisionId] = Field(
        None, alias='PolicyRevisionId'
    )
    ResourceArn: ComprehendModelArn


class DescribeDatasetResponse(BaseModel):
    DatasetProperties_1: Optional[DatasetProperties] = Field(
        None, alias='DatasetProperties'
    )


class DescribeDocumentClassificationJobRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')


class DescribeDocumentClassifierRequest(BaseModel):
    DocumentClassifierArn_1: DocumentClassifierArn = Field(
        ..., alias='DocumentClassifierArn'
    )


class DescribeDominantLanguageDetectionJobRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')


class DescribeEntitiesDetectionJobRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')


class DescribeEntityRecognizerRequest(BaseModel):
    EntityRecognizerArn_1: EntityRecognizerArn = Field(..., alias='EntityRecognizerArn')


class DescribeEventsDetectionJobRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')


class DescribeFlywheelIterationRequest(BaseModel):
    FlywheelArn: ComprehendFlywheelArn
    FlywheelIterationId_1: FlywheelIterationId = Field(..., alias='FlywheelIterationId')


class DescribeKeyPhrasesDetectionJobRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')


class DescribePiiEntitiesDetectionJobRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')


class DescribeResourcePolicyResponse(BaseModel):
    CreationTime: Optional[Timestamp] = None
    LastModifiedTime: Optional[Timestamp] = None
    PolicyRevisionId_1: Optional[PolicyRevisionId] = Field(
        None, alias='PolicyRevisionId'
    )
    ResourcePolicy: Optional[Policy] = None


class DescribeSentimentDetectionJobRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')


class DescribeTargetedSentimentDetectionJobRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')


class DescribeTopicsDetectionJobRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')


class DetectKeyPhrasesRequest(BaseModel):
    LanguageCode_1: LanguageCode = Field(..., alias='LanguageCode')
    Text: CustomerInputString


class DetectPiiEntitiesRequest(BaseModel):
    LanguageCode_1: LanguageCode = Field(..., alias='LanguageCode')
    Text: String


class DetectSentimentRequest(BaseModel):
    LanguageCode_1: LanguageCode = Field(..., alias='LanguageCode')
    Text: CustomerInputString


class DetectSentimentResponse(BaseModel):
    Sentiment: Optional[SentimentType] = None
    SentimentScore_1: Optional[SentimentScore] = Field(None, alias='SentimentScore')


class DetectSyntaxRequest(BaseModel):
    LanguageCode: SyntaxLanguageCode
    Text: CustomerInputString


class DetectTargetedSentimentRequest(BaseModel):
    LanguageCode_1: LanguageCode = Field(..., alias='LanguageCode')
    Text: CustomerInputString


class DocumentClass(BaseModel):
    Name: Optional[String] = None
    Page: Optional[Integer] = None
    Score: Optional[Float] = None


class DocumentClassificationConfig(BaseModel):
    Labels: Optional[LabelsList] = None
    Mode: DocumentClassifierMode


class DocumentClassificationJobFilter(BaseModel):
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    SubmitTimeAfter: Optional[Timestamp] = None
    SubmitTimeBefore: Optional[Timestamp] = None


class DocumentClassifierAugmentedManifestsList(
    RootModel[List[AugmentedManifestsListItem]]
):
    root: List[AugmentedManifestsListItem]


class DocumentClassifierDocuments(BaseModel):
    S3Uri_1: S3Uri = Field(..., alias='S3Uri')
    TestS3Uri: Optional[S3Uri] = None


class DocumentClassifierFilter(BaseModel):
    DocumentClassifierName: Optional[ComprehendArnName] = None
    Status: Optional[ModelStatus] = None
    SubmitTimeAfter: Optional[Timestamp] = None
    SubmitTimeBefore: Optional[Timestamp] = None


class DocumentClassifierOutputDataConfig(BaseModel):
    FlywheelStatsS3Prefix: Optional[S3Uri] = None
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    S3Uri_1: Optional[S3Uri] = Field(None, alias='S3Uri')


class DocumentClassifierSummary(BaseModel):
    DocumentClassifierName: Optional[ComprehendArnName] = None
    LatestVersionCreatedAt: Optional[Timestamp] = None
    LatestVersionName: Optional[VersionName] = None
    LatestVersionStatus: Optional[ModelStatus] = None
    NumberOfVersions: Optional[Integer] = None


class DocumentLabel(BaseModel):
    Name: Optional[String] = None
    Page: Optional[Integer] = None
    Score: Optional[Float] = None


class DocumentReaderConfig(BaseModel):
    DocumentReadAction_1: DocumentReadAction = Field(..., alias='DocumentReadAction')
    DocumentReadMode_1: Optional[DocumentReadMode] = Field(
        None, alias='DocumentReadMode'
    )
    FeatureTypes: Optional[ListOfDocumentReadFeatureTypes] = None


class DocumentTypeListItem(BaseModel):
    Page: Optional[Integer] = None
    Type: Optional[DocumentType] = None


class DominantLanguage(BaseModel):
    LanguageCode: Optional[String] = None
    Score: Optional[Float] = None


class DominantLanguageDetectionJobFilter(BaseModel):
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    SubmitTimeAfter: Optional[Timestamp] = None
    SubmitTimeBefore: Optional[Timestamp] = None


class EndpointFilter(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    ModelArn: Optional[ComprehendModelArn] = None
    Status: Optional[EndpointStatus] = None


class EndpointProperties(BaseModel):
    CreationTime: Optional[Timestamp] = None
    CurrentInferenceUnits: Optional[InferenceUnitsInteger] = None
    DataAccessRoleArn: Optional[IamRoleArn] = None
    DesiredDataAccessRoleArn: Optional[IamRoleArn] = None
    DesiredInferenceUnits: Optional[InferenceUnitsInteger] = None
    DesiredModelArn: Optional[ComprehendModelArn] = None
    EndpointArn: Optional[ComprehendEndpointArn] = None
    FlywheelArn: Optional[ComprehendFlywheelArn] = None
    LastModifiedTime: Optional[Timestamp] = None
    Message: Optional[AnyLengthString] = None
    ModelArn: Optional[ComprehendModelArn] = None
    Status: Optional[EndpointStatus] = None


class EndpointPropertiesList(RootModel[List[EndpointProperties]]):
    root: List[EndpointProperties]


class EntitiesDetectionJobFilter(BaseModel):
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    SubmitTimeAfter: Optional[Timestamp] = None
    SubmitTimeBefore: Optional[Timestamp] = None


class EntityLabel(BaseModel):
    Name: Optional[PiiEntityType] = None
    Score: Optional[Float] = None


class EntityRecognizerAnnotations(BaseModel):
    S3Uri_1: S3Uri = Field(..., alias='S3Uri')
    TestS3Uri: Optional[S3Uri] = None


class EntityRecognizerAugmentedManifestsList(
    RootModel[List[AugmentedManifestsListItem]]
):
    root: List[AugmentedManifestsListItem]


class EntityRecognizerDocuments(BaseModel):
    InputFormat_1: Optional[InputFormat] = Field(None, alias='InputFormat')
    S3Uri_1: S3Uri = Field(..., alias='S3Uri')
    TestS3Uri: Optional[S3Uri] = None


class EntityRecognizerEntityList(BaseModel):
    S3Uri_1: S3Uri = Field(..., alias='S3Uri')


class EntityRecognizerFilter(BaseModel):
    RecognizerName: Optional[ComprehendArnName] = None
    Status: Optional[ModelStatus] = None
    SubmitTimeAfter: Optional[Timestamp] = None
    SubmitTimeBefore: Optional[Timestamp] = None


class EntityRecognizerMetadataEntityTypesListItem(BaseModel):
    EvaluationMetrics: Optional[EntityTypesEvaluationMetrics] = None
    NumberOfTrainMentions: Optional[Integer] = None
    Type: Optional[AnyLengthString] = None


class EntityRecognizerOutputDataConfig(BaseModel):
    FlywheelStatsS3Prefix: Optional[S3Uri] = None


class EntityRecognizerSummary(BaseModel):
    LatestVersionCreatedAt: Optional[Timestamp] = None
    LatestVersionName: Optional[VersionName] = None
    LatestVersionStatus: Optional[ModelStatus] = None
    NumberOfVersions: Optional[Integer] = None
    RecognizerName: Optional[ComprehendArnName] = None


class EntityTypesList(RootModel[List[EntityTypesListItem]]):
    root: List[EntityTypesListItem]


class ErrorsListItem(BaseModel):
    ErrorCode: Optional[PageBasedErrorCode] = None
    ErrorMessage: Optional[String] = None
    Page: Optional[Integer] = None


class EventsDetectionJobFilter(BaseModel):
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    SubmitTimeAfter: Optional[Timestamp] = None
    SubmitTimeBefore: Optional[Timestamp] = None


class ExtractedCharactersListItem(BaseModel):
    Count: Optional[Integer] = None
    Page: Optional[Integer] = None


class FlywheelFilter(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None
    Status: Optional[FlywheelStatus] = None


class FlywheelIterationFilter(BaseModel):
    CreationTimeAfter: Optional[Timestamp] = None
    CreationTimeBefore: Optional[Timestamp] = None


class FlywheelIterationProperties(BaseModel):
    CreationTime: Optional[Timestamp] = None
    EndTime: Optional[Timestamp] = None
    EvaluatedModelArn: Optional[ComprehendModelArn] = None
    EvaluatedModelMetrics: Optional[FlywheelModelEvaluationMetrics] = None
    EvaluationManifestS3Prefix: Optional[S3Uri] = None
    FlywheelArn: Optional[ComprehendFlywheelArn] = None
    FlywheelIterationId_1: Optional[FlywheelIterationId] = Field(
        None, alias='FlywheelIterationId'
    )
    Message: Optional[AnyLengthString] = None
    Status: Optional[FlywheelIterationStatus] = None
    TrainedModelArn: Optional[ComprehendModelArn] = None
    TrainedModelMetrics: Optional[FlywheelModelEvaluationMetrics] = None


class FlywheelIterationPropertiesList(RootModel[List[FlywheelIterationProperties]]):
    root: List[FlywheelIterationProperties]


class FlywheelSummary(BaseModel):
    ActiveModelArn: Optional[ComprehendModelArn] = None
    CreationTime: Optional[Timestamp] = None
    DataLakeS3Uri: Optional[S3Uri] = None
    FlywheelArn: Optional[ComprehendFlywheelArn] = None
    LastModifiedTime: Optional[Timestamp] = None
    LatestFlywheelIteration: Optional[FlywheelIterationId] = None
    Message: Optional[AnyLengthString] = None
    ModelType_1: Optional[ModelType] = Field(None, alias='ModelType')
    Status: Optional[FlywheelStatus] = None


class FlywheelSummaryList(RootModel[List[FlywheelSummary]]):
    root: List[FlywheelSummary]


class Geometry(BaseModel):
    BoundingBox_1: Optional[BoundingBox] = Field(None, alias='BoundingBox')
    Polygon_1: Optional[Polygon] = Field(None, alias='Polygon')


class InputDataConfig(BaseModel):
    DocumentReaderConfig_1: Optional[DocumentReaderConfig] = Field(
        None, alias='DocumentReaderConfig'
    )
    InputFormat_1: Optional[InputFormat] = Field(None, alias='InputFormat')
    S3Uri_1: S3Uri = Field(..., alias='S3Uri')


class KeyPhrase(BaseModel):
    BeginOffset: Optional[Integer] = None
    EndOffset: Optional[Integer] = None
    Score: Optional[Float] = None
    Text: Optional[String] = None


class KeyPhrasesDetectionJobFilter(BaseModel):
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    SubmitTimeAfter: Optional[Timestamp] = None
    SubmitTimeBefore: Optional[Timestamp] = None


class ListDatasetsRequest(BaseModel):
    Filter: Optional[DatasetFilter] = None
    FlywheelArn: Optional[ComprehendFlywheelArn] = None
    MaxResults: Optional[MaxResultsInteger] = None
    NextToken: Optional[String] = None


class ListDatasetsResponse(BaseModel):
    DatasetPropertiesList_1: Optional[DatasetPropertiesList] = Field(
        None, alias='DatasetPropertiesList'
    )
    NextToken: Optional[String] = None


class ListDocumentClassificationJobsRequest(BaseModel):
    Filter: Optional[DocumentClassificationJobFilter] = None
    MaxResults: Optional[MaxResultsInteger] = None
    NextToken: Optional[String] = None


class ListDocumentClassifierSummariesRequest(BaseModel):
    MaxResults: Optional[MaxResultsInteger] = None
    NextToken: Optional[String] = None


class ListDocumentClassifiersRequest(BaseModel):
    Filter: Optional[DocumentClassifierFilter] = None
    MaxResults: Optional[MaxResultsInteger] = None
    NextToken: Optional[String] = None


class ListDominantLanguageDetectionJobsRequest(BaseModel):
    Filter: Optional[DominantLanguageDetectionJobFilter] = None
    MaxResults: Optional[MaxResultsInteger] = None
    NextToken: Optional[String] = None


class ListEndpointsRequest(BaseModel):
    Filter: Optional[EndpointFilter] = None
    MaxResults: Optional[MaxResultsInteger] = None
    NextToken: Optional[String] = None


class ListEndpointsResponse(BaseModel):
    EndpointPropertiesList_1: Optional[EndpointPropertiesList] = Field(
        None, alias='EndpointPropertiesList'
    )
    NextToken: Optional[String] = None


class ListEntitiesDetectionJobsRequest(BaseModel):
    Filter: Optional[EntitiesDetectionJobFilter] = None
    MaxResults: Optional[MaxResultsInteger] = None
    NextToken: Optional[String] = None


class ListEntityRecognizerSummariesRequest(BaseModel):
    MaxResults: Optional[MaxResultsInteger] = None
    NextToken: Optional[String] = None


class ListEntityRecognizersRequest(BaseModel):
    Filter: Optional[EntityRecognizerFilter] = None
    MaxResults: Optional[MaxResultsInteger] = None
    NextToken: Optional[String] = None


class ListEventsDetectionJobsRequest(BaseModel):
    Filter: Optional[EventsDetectionJobFilter] = None
    MaxResults: Optional[MaxResultsInteger] = None
    NextToken: Optional[String] = None


class ListFlywheelIterationHistoryRequest(BaseModel):
    Filter: Optional[FlywheelIterationFilter] = None
    FlywheelArn: ComprehendFlywheelArn
    MaxResults: Optional[MaxResultsInteger] = None
    NextToken: Optional[String] = None


class ListFlywheelIterationHistoryResponse(BaseModel):
    FlywheelIterationPropertiesList_1: Optional[FlywheelIterationPropertiesList] = (
        Field(None, alias='FlywheelIterationPropertiesList')
    )
    NextToken: Optional[String] = None


class ListFlywheelsRequest(BaseModel):
    Filter: Optional[FlywheelFilter] = None
    MaxResults: Optional[MaxResultsInteger] = None
    NextToken: Optional[String] = None


class ListFlywheelsResponse(BaseModel):
    FlywheelSummaryList_1: Optional[FlywheelSummaryList] = Field(
        None, alias='FlywheelSummaryList'
    )
    NextToken: Optional[String] = None


class ListKeyPhrasesDetectionJobsRequest(BaseModel):
    Filter: Optional[KeyPhrasesDetectionJobFilter] = None
    MaxResults: Optional[MaxResultsInteger] = None
    NextToken: Optional[String] = None


class ListOfChildBlocks(RootModel[List[ChildBlock]]):
    root: List[ChildBlock]


class ListOfClasses(RootModel[List[DocumentClass]]):
    root: List[DocumentClass]


class ListOfDetectSentimentResult(RootModel[List[BatchDetectSentimentItemResult]]):
    root: List[BatchDetectSentimentItemResult]


class ListOfDocumentType(RootModel[List[DocumentTypeListItem]]):
    root: List[DocumentTypeListItem]


class ListOfDominantLanguages(RootModel[List[DominantLanguage]]):
    root: List[DominantLanguage]


class ListOfEntityLabels(RootModel[List[EntityLabel]]):
    root: List[EntityLabel]


class ListOfErrors(RootModel[List[ErrorsListItem]]):
    root: List[ErrorsListItem]


class ListOfExtractedCharacters(RootModel[List[ExtractedCharactersListItem]]):
    root: List[ExtractedCharactersListItem]


class ListOfKeyPhrases(RootModel[List[KeyPhrase]]):
    root: List[KeyPhrase]


class ListOfLabels(RootModel[List[DocumentLabel]]):
    root: List[DocumentLabel]


class ListOfPiiEntityTypes(RootModel[List[PiiEntityType]]):
    root: List[PiiEntityType]


class ListOfWarnings(RootModel[List[WarningsListItem]]):
    root: List[WarningsListItem]


class ListTopicsDetectionJobsRequest(BaseModel):
    Filter: Optional[TopicsDetectionJobFilter] = None
    MaxResults: Optional[MaxResultsInteger] = None
    NextToken: Optional[String] = None


class MentionSentiment(BaseModel):
    Sentiment: Optional[SentimentType] = None
    SentimentScore_1: Optional[SentimentScore] = Field(None, alias='SentimentScore')


class OutputDataConfig(BaseModel):
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    S3Uri_1: S3Uri = Field(..., alias='S3Uri')


class PartOfSpeechTag(BaseModel):
    Score: Optional[Float] = None
    Tag: Optional[PartOfSpeechTagType] = None


class PiiEntitiesDetectionJobFilter(BaseModel):
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    SubmitTimeAfter: Optional[Timestamp] = None
    SubmitTimeBefore: Optional[Timestamp] = None


class PiiEntity(BaseModel):
    BeginOffset: Optional[Integer] = None
    EndOffset: Optional[Integer] = None
    Score: Optional[Float] = None
    Type: Optional[PiiEntityType] = None


class PiiOutputDataConfig(BaseModel):
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    S3Uri_1: S3Uri = Field(..., alias='S3Uri')


class RedactionConfig(BaseModel):
    MaskCharacter_1: Optional[MaskCharacter] = Field(None, alias='MaskCharacter')
    MaskMode: Optional[PiiEntitiesDetectionMaskMode] = None
    PiiEntityTypes: Optional[ListOfPiiEntityTypes] = None


class RelationshipsListItem(BaseModel):
    Ids: Optional[StringList] = None
    Type: Optional[RelationshipType] = None


class SentimentDetectionJobFilter(BaseModel):
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    SubmitTimeAfter: Optional[Timestamp] = None
    SubmitTimeBefore: Optional[Timestamp] = None


class SentimentDetectionJobProperties(BaseModel):
    DataAccessRoleArn: Optional[IamRoleArn] = None
    EndTime: Optional[Timestamp] = None
    InputDataConfig_1: Optional[InputDataConfig] = Field(None, alias='InputDataConfig')
    JobArn: Optional[ComprehendArn] = None
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    Message: Optional[AnyLengthString] = None
    OutputDataConfig_1: Optional[OutputDataConfig] = Field(
        None, alias='OutputDataConfig'
    )
    SubmitTime: Optional[Timestamp] = None
    VolumeKmsKeyId: Optional[KmsKeyId] = None
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class SentimentDetectionJobPropertiesList(
    RootModel[List[SentimentDetectionJobProperties]]
):
    root: List[SentimentDetectionJobProperties]


class SyntaxToken(BaseModel):
    BeginOffset: Optional[Integer] = None
    EndOffset: Optional[Integer] = None
    PartOfSpeech: Optional[PartOfSpeechTag] = None
    Text: Optional[String] = None
    TokenId: Optional[Integer] = None


class Tag(BaseModel):
    Key: TagKey
    Value: Optional[TagValue] = None


class TagList(RootModel[List[Tag]]):
    root: List[Tag]


class TagResourceRequest(BaseModel):
    ResourceArn: ComprehendArn
    Tags: TagList


class TargetedSentimentDetectionJobFilter(BaseModel):
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    SubmitTimeAfter: Optional[Timestamp] = None
    SubmitTimeBefore: Optional[Timestamp] = None


class TargetedSentimentDetectionJobProperties(BaseModel):
    DataAccessRoleArn: Optional[IamRoleArn] = None
    EndTime: Optional[Timestamp] = None
    InputDataConfig_1: Optional[InputDataConfig] = Field(None, alias='InputDataConfig')
    JobArn: Optional[ComprehendArn] = None
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    Message: Optional[AnyLengthString] = None
    OutputDataConfig_1: Optional[OutputDataConfig] = Field(
        None, alias='OutputDataConfig'
    )
    SubmitTime: Optional[Timestamp] = None
    VolumeKmsKeyId: Optional[KmsKeyId] = None
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class TargetedSentimentDetectionJobPropertiesList(
    RootModel[List[TargetedSentimentDetectionJobProperties]]
):
    root: List[TargetedSentimentDetectionJobProperties]


class TargetedSentimentMention(BaseModel):
    BeginOffset: Optional[Integer] = None
    EndOffset: Optional[Integer] = None
    GroupScore: Optional[Float] = None
    MentionSentiment_1: Optional[MentionSentiment] = Field(
        None, alias='MentionSentiment'
    )
    Score: Optional[Float] = None
    Text: Optional[String] = None
    Type: Optional[TargetedSentimentEntityType] = None


class TopicsDetectionJobProperties(BaseModel):
    DataAccessRoleArn: Optional[IamRoleArn] = None
    EndTime: Optional[Timestamp] = None
    InputDataConfig_1: Optional[InputDataConfig] = Field(None, alias='InputDataConfig')
    JobArn: Optional[ComprehendArn] = None
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    Message: Optional[AnyLengthString] = None
    NumberOfTopics: Optional[Integer] = None
    OutputDataConfig_1: Optional[OutputDataConfig] = Field(
        None, alias='OutputDataConfig'
    )
    SubmitTime: Optional[Timestamp] = None
    VolumeKmsKeyId: Optional[KmsKeyId] = None
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class TopicsDetectionJobPropertiesList(RootModel[List[TopicsDetectionJobProperties]]):
    root: List[TopicsDetectionJobProperties]


class UpdateDataSecurityConfig(BaseModel):
    ModelKmsKeyId: Optional[KmsKeyId] = None
    VolumeKmsKeyId: Optional[KmsKeyId] = None
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class UpdateFlywheelRequest(BaseModel):
    ActiveModelArn: Optional[ComprehendModelArn] = None
    DataAccessRoleArn: Optional[IamRoleArn] = None
    DataSecurityConfig: Optional[UpdateDataSecurityConfig] = None
    FlywheelArn: ComprehendFlywheelArn


class BatchDetectDominantLanguageItemResult(BaseModel):
    Index: Optional[Integer] = None
    Languages: Optional[ListOfDominantLanguages] = None


class BatchDetectKeyPhrasesItemResult(BaseModel):
    Index: Optional[Integer] = None
    KeyPhrases: Optional[ListOfKeyPhrases] = None


class BatchDetectSentimentResponse(BaseModel):
    ErrorList: BatchItemErrorList
    ResultList: ListOfDetectSentimentResult


class BlockReference(BaseModel):
    BeginOffset: Optional[Integer] = None
    BlockId: Optional[String] = None
    ChildBlocks: Optional[ListOfChildBlocks] = None
    EndOffset: Optional[Integer] = None


class ClassifyDocumentRequest(BaseModel):
    Bytes: Optional[SemiStructuredDocumentBlob] = None
    DocumentReaderConfig_1: Optional[DocumentReaderConfig] = Field(
        None, alias='DocumentReaderConfig'
    )
    EndpointArn: DocumentClassifierEndpointArn
    Text: Optional[CustomerInputString] = None


class ContainsPiiEntitiesResponse(BaseModel):
    Labels: Optional[ListOfEntityLabels] = None


class CreateEndpointRequest(BaseModel):
    ClientRequestToken: Optional[ClientRequestTokenString] = None
    DataAccessRoleArn: Optional[IamRoleArn] = None
    DesiredInferenceUnits: InferenceUnitsInteger
    EndpointName: ComprehendEndpointName
    FlywheelArn: Optional[ComprehendFlywheelArn] = None
    ModelArn: Optional[ComprehendModelArn] = None
    Tags: Optional[TagList] = None


class DatasetAugmentedManifestsList(RootModel[List[DatasetAugmentedManifestsListItem]]):
    root: List[DatasetAugmentedManifestsListItem]


class DatasetInputDataConfig(BaseModel):
    AugmentedManifests: Optional[DatasetAugmentedManifestsList] = None
    DataFormat: Optional[DatasetDataFormat] = None
    DocumentClassifierInputDataConfig: Optional[
        DatasetDocumentClassifierInputDataConfig
    ] = None
    EntityRecognizerInputDataConfig: Optional[
        DatasetEntityRecognizerInputDataConfig
    ] = None


class DescribeEndpointResponse(BaseModel):
    EndpointProperties_1: Optional[EndpointProperties] = Field(
        None, alias='EndpointProperties'
    )


class DescribeFlywheelIterationResponse(BaseModel):
    FlywheelIterationProperties_1: Optional[FlywheelIterationProperties] = Field(
        None, alias='FlywheelIterationProperties'
    )


class DescribeSentimentDetectionJobResponse(BaseModel):
    SentimentDetectionJobProperties_1: Optional[SentimentDetectionJobProperties] = (
        Field(None, alias='SentimentDetectionJobProperties')
    )


class DescribeTargetedSentimentDetectionJobResponse(BaseModel):
    TargetedSentimentDetectionJobProperties_1: Optional[
        TargetedSentimentDetectionJobProperties
    ] = Field(None, alias='TargetedSentimentDetectionJobProperties')


class DescribeTopicsDetectionJobResponse(BaseModel):
    TopicsDetectionJobProperties_1: Optional[TopicsDetectionJobProperties] = Field(
        None, alias='TopicsDetectionJobProperties'
    )


class DetectDominantLanguageResponse(BaseModel):
    Languages: Optional[ListOfDominantLanguages] = None


class DetectEntitiesRequest(BaseModel):
    Bytes: Optional[SemiStructuredDocumentBlob] = None
    DocumentReaderConfig_1: Optional[DocumentReaderConfig] = Field(
        None, alias='DocumentReaderConfig'
    )
    EndpointArn: Optional[EntityRecognizerEndpointArn] = None
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    Text: Optional[CustomerInputString] = None


class DetectKeyPhrasesResponse(BaseModel):
    KeyPhrases: Optional[ListOfKeyPhrases] = None


class DocumentClassificationJobProperties(BaseModel):
    DataAccessRoleArn: Optional[IamRoleArn] = None
    DocumentClassifierArn_1: Optional[DocumentClassifierArn] = Field(
        None, alias='DocumentClassifierArn'
    )
    EndTime: Optional[Timestamp] = None
    FlywheelArn: Optional[ComprehendFlywheelArn] = None
    InputDataConfig_1: Optional[InputDataConfig] = Field(None, alias='InputDataConfig')
    JobArn: Optional[ComprehendArn] = None
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    Message: Optional[AnyLengthString] = None
    OutputDataConfig_1: Optional[OutputDataConfig] = Field(
        None, alias='OutputDataConfig'
    )
    SubmitTime: Optional[Timestamp] = None
    VolumeKmsKeyId: Optional[KmsKeyId] = None
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class DocumentClassificationJobPropertiesList(
    RootModel[List[DocumentClassificationJobProperties]]
):
    root: List[DocumentClassificationJobProperties]


class DocumentClassifierInputDataConfig(BaseModel):
    AugmentedManifests: Optional[DocumentClassifierAugmentedManifestsList] = None
    DataFormat: Optional[DocumentClassifierDataFormat] = None
    DocumentReaderConfig_1: Optional[DocumentReaderConfig] = Field(
        None, alias='DocumentReaderConfig'
    )
    DocumentType: Optional[DocumentClassifierDocumentTypeFormat] = None
    Documents: Optional[DocumentClassifierDocuments] = None
    LabelDelimiter_1: Optional[LabelDelimiter] = Field(None, alias='LabelDelimiter')
    S3Uri_1: Optional[S3Uri] = Field(None, alias='S3Uri')
    TestS3Uri: Optional[S3Uri] = None


class DocumentClassifierProperties(BaseModel):
    ClassifierMetadata_1: Optional[ClassifierMetadata] = Field(
        None, alias='ClassifierMetadata'
    )
    DataAccessRoleArn: Optional[IamRoleArn] = None
    DocumentClassifierArn_1: Optional[DocumentClassifierArn] = Field(
        None, alias='DocumentClassifierArn'
    )
    EndTime: Optional[Timestamp] = None
    FlywheelArn: Optional[ComprehendFlywheelArn] = None
    InputDataConfig: Optional[DocumentClassifierInputDataConfig] = None
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    Message: Optional[AnyLengthString] = None
    Mode: Optional[DocumentClassifierMode] = None
    ModelKmsKeyId: Optional[KmsKeyId] = None
    OutputDataConfig: Optional[DocumentClassifierOutputDataConfig] = None
    SourceModelArn: Optional[DocumentClassifierArn] = None
    Status: Optional[ModelStatus] = None
    SubmitTime: Optional[Timestamp] = None
    TrainingEndTime: Optional[Timestamp] = None
    TrainingStartTime: Optional[Timestamp] = None
    VersionName_1: Optional[VersionName] = Field(None, alias='VersionName')
    VolumeKmsKeyId: Optional[KmsKeyId] = None
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class DocumentClassifierPropertiesList(RootModel[List[DocumentClassifierProperties]]):
    root: List[DocumentClassifierProperties]


class DocumentClassifierSummariesList(RootModel[List[DocumentClassifierSummary]]):
    root: List[DocumentClassifierSummary]


class DocumentMetadata(BaseModel):
    ExtractedCharacters: Optional[ListOfExtractedCharacters] = None
    Pages: Optional[Integer] = None


class DominantLanguageDetectionJobProperties(BaseModel):
    DataAccessRoleArn: Optional[IamRoleArn] = None
    EndTime: Optional[Timestamp] = None
    InputDataConfig_1: Optional[InputDataConfig] = Field(None, alias='InputDataConfig')
    JobArn: Optional[ComprehendArn] = None
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    Message: Optional[AnyLengthString] = None
    OutputDataConfig_1: Optional[OutputDataConfig] = Field(
        None, alias='OutputDataConfig'
    )
    SubmitTime: Optional[Timestamp] = None
    VolumeKmsKeyId: Optional[KmsKeyId] = None
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class DominantLanguageDetectionJobPropertiesList(
    RootModel[List[DominantLanguageDetectionJobProperties]]
):
    root: List[DominantLanguageDetectionJobProperties]


class EntitiesDetectionJobProperties(BaseModel):
    DataAccessRoleArn: Optional[IamRoleArn] = None
    EndTime: Optional[Timestamp] = None
    EntityRecognizerArn_1: Optional[EntityRecognizerArn] = Field(
        None, alias='EntityRecognizerArn'
    )
    FlywheelArn: Optional[ComprehendFlywheelArn] = None
    InputDataConfig_1: Optional[InputDataConfig] = Field(None, alias='InputDataConfig')
    JobArn: Optional[ComprehendArn] = None
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    Message: Optional[AnyLengthString] = None
    OutputDataConfig_1: Optional[OutputDataConfig] = Field(
        None, alias='OutputDataConfig'
    )
    SubmitTime: Optional[Timestamp] = None
    VolumeKmsKeyId: Optional[KmsKeyId] = None
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class EntitiesDetectionJobPropertiesList(
    RootModel[List[EntitiesDetectionJobProperties]]
):
    root: List[EntitiesDetectionJobProperties]


class EntityRecognitionConfig(BaseModel):
    EntityTypes: EntityTypesList


class EntityRecognizerInputDataConfig(BaseModel):
    Annotations: Optional[EntityRecognizerAnnotations] = None
    AugmentedManifests: Optional[EntityRecognizerAugmentedManifestsList] = None
    DataFormat: Optional[EntityRecognizerDataFormat] = None
    Documents: Optional[EntityRecognizerDocuments] = None
    EntityList: Optional[EntityRecognizerEntityList] = None
    EntityTypes: EntityTypesList


class EntityRecognizerMetadataEntityTypesList(
    RootModel[List[EntityRecognizerMetadataEntityTypesListItem]]
):
    root: List[EntityRecognizerMetadataEntityTypesListItem]


class EntityRecognizerSummariesList(RootModel[List[EntityRecognizerSummary]]):
    root: List[EntityRecognizerSummary]


class EventsDetectionJobProperties(BaseModel):
    DataAccessRoleArn: Optional[IamRoleArn] = None
    EndTime: Optional[Timestamp] = None
    InputDataConfig_1: Optional[InputDataConfig] = Field(None, alias='InputDataConfig')
    JobArn: Optional[ComprehendArn] = None
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    Message: Optional[AnyLengthString] = None
    OutputDataConfig_1: Optional[OutputDataConfig] = Field(
        None, alias='OutputDataConfig'
    )
    SubmitTime: Optional[Timestamp] = None
    TargetEventTypes_1: Optional[TargetEventTypes] = Field(
        None, alias='TargetEventTypes'
    )


class EventsDetectionJobPropertiesList(RootModel[List[EventsDetectionJobProperties]]):
    root: List[EventsDetectionJobProperties]


class ImportModelRequest(BaseModel):
    DataAccessRoleArn: Optional[IamRoleArn] = None
    ModelKmsKeyId: Optional[KmsKeyId] = None
    ModelName: Optional[ComprehendArnName] = None
    SourceModelArn: ComprehendModelArn
    Tags: Optional[TagList] = None
    VersionName_1: Optional[VersionName] = Field(None, alias='VersionName')


class KeyPhrasesDetectionJobProperties(BaseModel):
    DataAccessRoleArn: Optional[IamRoleArn] = None
    EndTime: Optional[Timestamp] = None
    InputDataConfig_1: Optional[InputDataConfig] = Field(None, alias='InputDataConfig')
    JobArn: Optional[ComprehendArn] = None
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    Message: Optional[AnyLengthString] = None
    OutputDataConfig_1: Optional[OutputDataConfig] = Field(
        None, alias='OutputDataConfig'
    )
    SubmitTime: Optional[Timestamp] = None
    VolumeKmsKeyId: Optional[KmsKeyId] = None
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class KeyPhrasesDetectionJobPropertiesList(
    RootModel[List[KeyPhrasesDetectionJobProperties]]
):
    root: List[KeyPhrasesDetectionJobProperties]


class ListDocumentClassificationJobsResponse(BaseModel):
    DocumentClassificationJobPropertiesList_1: Optional[
        DocumentClassificationJobPropertiesList
    ] = Field(None, alias='DocumentClassificationJobPropertiesList')
    NextToken: Optional[String] = None


class ListDocumentClassifierSummariesResponse(BaseModel):
    DocumentClassifierSummariesList_1: Optional[DocumentClassifierSummariesList] = (
        Field(None, alias='DocumentClassifierSummariesList')
    )
    NextToken: Optional[String] = None


class ListDocumentClassifiersResponse(BaseModel):
    DocumentClassifierPropertiesList_1: Optional[DocumentClassifierPropertiesList] = (
        Field(None, alias='DocumentClassifierPropertiesList')
    )
    NextToken: Optional[String] = None


class ListDominantLanguageDetectionJobsResponse(BaseModel):
    DominantLanguageDetectionJobPropertiesList_1: Optional[
        DominantLanguageDetectionJobPropertiesList
    ] = Field(None, alias='DominantLanguageDetectionJobPropertiesList')
    NextToken: Optional[String] = None


class ListEntitiesDetectionJobsResponse(BaseModel):
    EntitiesDetectionJobPropertiesList_1: Optional[
        EntitiesDetectionJobPropertiesList
    ] = Field(None, alias='EntitiesDetectionJobPropertiesList')
    NextToken: Optional[String] = None


class ListEntityRecognizerSummariesResponse(BaseModel):
    EntityRecognizerSummariesList_1: Optional[EntityRecognizerSummariesList] = Field(
        None, alias='EntityRecognizerSummariesList'
    )
    NextToken: Optional[String] = None


class ListEventsDetectionJobsResponse(BaseModel):
    EventsDetectionJobPropertiesList_1: Optional[EventsDetectionJobPropertiesList] = (
        Field(None, alias='EventsDetectionJobPropertiesList')
    )
    NextToken: Optional[String] = None


class ListKeyPhrasesDetectionJobsResponse(BaseModel):
    KeyPhrasesDetectionJobPropertiesList_1: Optional[
        KeyPhrasesDetectionJobPropertiesList
    ] = Field(None, alias='KeyPhrasesDetectionJobPropertiesList')
    NextToken: Optional[String] = None


class ListOfBlockReferences(RootModel[List[BlockReference]]):
    root: List[BlockReference]


class ListOfDetectDominantLanguageResult(
    RootModel[List[BatchDetectDominantLanguageItemResult]]
):
    root: List[BatchDetectDominantLanguageItemResult]


class ListOfDetectKeyPhrasesResult(RootModel[List[BatchDetectKeyPhrasesItemResult]]):
    root: List[BatchDetectKeyPhrasesItemResult]


class ListOfMentions(RootModel[List[TargetedSentimentMention]]):
    root: List[TargetedSentimentMention]


class ListOfPiiEntities(RootModel[List[PiiEntity]]):
    root: List[PiiEntity]


class ListOfRelationships(RootModel[List[RelationshipsListItem]]):
    root: List[RelationshipsListItem]


class ListOfSyntaxTokens(RootModel[List[SyntaxToken]]):
    root: List[SyntaxToken]


class ListPiiEntitiesDetectionJobsRequest(BaseModel):
    Filter: Optional[PiiEntitiesDetectionJobFilter] = None
    MaxResults: Optional[MaxResultsInteger] = None
    NextToken: Optional[String] = None


class ListSentimentDetectionJobsRequest(BaseModel):
    Filter: Optional[SentimentDetectionJobFilter] = None
    MaxResults: Optional[MaxResultsInteger] = None
    NextToken: Optional[String] = None


class ListSentimentDetectionJobsResponse(BaseModel):
    NextToken: Optional[String] = None
    SentimentDetectionJobPropertiesList_1: Optional[
        SentimentDetectionJobPropertiesList
    ] = Field(None, alias='SentimentDetectionJobPropertiesList')


class ListTagsForResourceResponse(BaseModel):
    ResourceArn: Optional[ComprehendArn] = None
    Tags: Optional[TagList] = None


class ListTargetedSentimentDetectionJobsRequest(BaseModel):
    Filter: Optional[TargetedSentimentDetectionJobFilter] = None
    MaxResults: Optional[MaxResultsInteger] = None
    NextToken: Optional[String] = None


class ListTargetedSentimentDetectionJobsResponse(BaseModel):
    NextToken: Optional[String] = None
    TargetedSentimentDetectionJobPropertiesList_1: Optional[
        TargetedSentimentDetectionJobPropertiesList
    ] = Field(None, alias='TargetedSentimentDetectionJobPropertiesList')


class ListTopicsDetectionJobsResponse(BaseModel):
    NextToken: Optional[String] = None
    TopicsDetectionJobPropertiesList_1: Optional[TopicsDetectionJobPropertiesList] = (
        Field(None, alias='TopicsDetectionJobPropertiesList')
    )


class PiiEntitiesDetectionJobProperties(BaseModel):
    DataAccessRoleArn: Optional[IamRoleArn] = None
    EndTime: Optional[Timestamp] = None
    InputDataConfig_1: Optional[InputDataConfig] = Field(None, alias='InputDataConfig')
    JobArn: Optional[ComprehendArn] = None
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    Message: Optional[AnyLengthString] = None
    Mode: Optional[PiiEntitiesDetectionMode] = None
    OutputDataConfig: Optional[PiiOutputDataConfig] = None
    RedactionConfig_1: Optional[RedactionConfig] = Field(None, alias='RedactionConfig')
    SubmitTime: Optional[Timestamp] = None


class PiiEntitiesDetectionJobPropertiesList(
    RootModel[List[PiiEntitiesDetectionJobProperties]]
):
    root: List[PiiEntitiesDetectionJobProperties]


class StartDocumentClassificationJobRequest(BaseModel):
    ClientRequestToken: Optional[ClientRequestTokenString] = None
    DataAccessRoleArn: IamRoleArn
    DocumentClassifierArn_1: Optional[DocumentClassifierArn] = Field(
        None, alias='DocumentClassifierArn'
    )
    FlywheelArn: Optional[ComprehendFlywheelArn] = None
    InputDataConfig_1: InputDataConfig = Field(..., alias='InputDataConfig')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    OutputDataConfig_1: OutputDataConfig = Field(..., alias='OutputDataConfig')
    Tags: Optional[TagList] = None
    VolumeKmsKeyId: Optional[KmsKeyId] = None
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class StartDominantLanguageDetectionJobRequest(BaseModel):
    ClientRequestToken: Optional[ClientRequestTokenString] = None
    DataAccessRoleArn: IamRoleArn
    InputDataConfig_1: InputDataConfig = Field(..., alias='InputDataConfig')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    OutputDataConfig_1: OutputDataConfig = Field(..., alias='OutputDataConfig')
    Tags: Optional[TagList] = None
    VolumeKmsKeyId: Optional[KmsKeyId] = None
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class StartEntitiesDetectionJobRequest(BaseModel):
    ClientRequestToken: Optional[ClientRequestTokenString] = None
    DataAccessRoleArn: IamRoleArn
    EntityRecognizerArn_1: Optional[EntityRecognizerArn] = Field(
        None, alias='EntityRecognizerArn'
    )
    FlywheelArn: Optional[ComprehendFlywheelArn] = None
    InputDataConfig_1: InputDataConfig = Field(..., alias='InputDataConfig')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    LanguageCode_1: LanguageCode = Field(..., alias='LanguageCode')
    OutputDataConfig_1: OutputDataConfig = Field(..., alias='OutputDataConfig')
    Tags: Optional[TagList] = None
    VolumeKmsKeyId: Optional[KmsKeyId] = None
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class StartEventsDetectionJobRequest(BaseModel):
    ClientRequestToken: Optional[ClientRequestTokenString] = None
    DataAccessRoleArn: IamRoleArn
    InputDataConfig_1: InputDataConfig = Field(..., alias='InputDataConfig')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    LanguageCode_1: LanguageCode = Field(..., alias='LanguageCode')
    OutputDataConfig_1: OutputDataConfig = Field(..., alias='OutputDataConfig')
    Tags: Optional[TagList] = None
    TargetEventTypes_1: TargetEventTypes = Field(..., alias='TargetEventTypes')


class StartKeyPhrasesDetectionJobRequest(BaseModel):
    ClientRequestToken: Optional[ClientRequestTokenString] = None
    DataAccessRoleArn: IamRoleArn
    InputDataConfig_1: InputDataConfig = Field(..., alias='InputDataConfig')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    LanguageCode_1: LanguageCode = Field(..., alias='LanguageCode')
    OutputDataConfig_1: OutputDataConfig = Field(..., alias='OutputDataConfig')
    Tags: Optional[TagList] = None
    VolumeKmsKeyId: Optional[KmsKeyId] = None
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class StartPiiEntitiesDetectionJobRequest(BaseModel):
    ClientRequestToken: Optional[ClientRequestTokenString] = None
    DataAccessRoleArn: IamRoleArn
    InputDataConfig_1: InputDataConfig = Field(..., alias='InputDataConfig')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    LanguageCode_1: LanguageCode = Field(..., alias='LanguageCode')
    Mode: PiiEntitiesDetectionMode
    OutputDataConfig_1: OutputDataConfig = Field(..., alias='OutputDataConfig')
    RedactionConfig_1: Optional[RedactionConfig] = Field(None, alias='RedactionConfig')
    Tags: Optional[TagList] = None


class StartSentimentDetectionJobRequest(BaseModel):
    ClientRequestToken: Optional[ClientRequestTokenString] = None
    DataAccessRoleArn: IamRoleArn
    InputDataConfig_1: InputDataConfig = Field(..., alias='InputDataConfig')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    LanguageCode_1: LanguageCode = Field(..., alias='LanguageCode')
    OutputDataConfig_1: OutputDataConfig = Field(..., alias='OutputDataConfig')
    Tags: Optional[TagList] = None
    VolumeKmsKeyId: Optional[KmsKeyId] = None
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class StartTargetedSentimentDetectionJobRequest(BaseModel):
    ClientRequestToken: Optional[ClientRequestTokenString] = None
    DataAccessRoleArn: IamRoleArn
    InputDataConfig_1: InputDataConfig = Field(..., alias='InputDataConfig')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    LanguageCode_1: LanguageCode = Field(..., alias='LanguageCode')
    OutputDataConfig_1: OutputDataConfig = Field(..., alias='OutputDataConfig')
    Tags: Optional[TagList] = None
    VolumeKmsKeyId: Optional[KmsKeyId] = None
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class StartTopicsDetectionJobRequest(BaseModel):
    ClientRequestToken: Optional[ClientRequestTokenString] = None
    DataAccessRoleArn: IamRoleArn
    InputDataConfig_1: InputDataConfig = Field(..., alias='InputDataConfig')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    NumberOfTopics: Optional[NumberOfTopicsInteger] = None
    OutputDataConfig_1: OutputDataConfig = Field(..., alias='OutputDataConfig')
    Tags: Optional[TagList] = None
    VolumeKmsKeyId: Optional[KmsKeyId] = None
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class TargetedSentimentEntity(BaseModel):
    DescriptiveMentionIndex: Optional[ListOfDescriptiveMentionIndices] = None
    Mentions: Optional[ListOfMentions] = None


class TaskConfig(BaseModel):
    DocumentClassificationConfig_1: Optional[DocumentClassificationConfig] = Field(
        None, alias='DocumentClassificationConfig'
    )
    EntityRecognitionConfig_1: Optional[EntityRecognitionConfig] = Field(
        None, alias='EntityRecognitionConfig'
    )
    LanguageCode_1: LanguageCode = Field(..., alias='LanguageCode')


class BatchDetectDominantLanguageResponse(BaseModel):
    ErrorList: BatchItemErrorList
    ResultList: ListOfDetectDominantLanguageResult


class BatchDetectKeyPhrasesResponse(BaseModel):
    ErrorList: BatchItemErrorList
    ResultList: ListOfDetectKeyPhrasesResult


class BatchDetectSyntaxItemResult(BaseModel):
    Index: Optional[Integer] = None
    SyntaxTokens: Optional[ListOfSyntaxTokens] = None


class Block(BaseModel):
    BlockType_1: Optional[BlockType] = Field(None, alias='BlockType')
    Geometry_1: Optional[Geometry] = Field(None, alias='Geometry')
    Id: Optional[String] = None
    Page: Optional[Integer] = None
    Relationships: Optional[ListOfRelationships] = None
    Text: Optional[String] = None


class ClassifyDocumentResponse(BaseModel):
    Classes: Optional[ListOfClasses] = None
    DocumentMetadata_1: Optional[DocumentMetadata] = Field(
        None, alias='DocumentMetadata'
    )
    DocumentType: Optional[ListOfDocumentType] = None
    Errors: Optional[ListOfErrors] = None
    Labels: Optional[ListOfLabels] = None
    Warnings: Optional[ListOfWarnings] = None


class CreateDatasetRequest(BaseModel):
    ClientRequestToken: Optional[ClientRequestTokenString] = None
    DatasetName: ComprehendArnName
    DatasetType_1: Optional[DatasetType] = Field(None, alias='DatasetType')
    Description_1: Optional[Description] = Field(None, alias='Description')
    FlywheelArn: ComprehendFlywheelArn
    InputDataConfig: DatasetInputDataConfig
    Tags: Optional[TagList] = None


class CreateDocumentClassifierRequest(BaseModel):
    ClientRequestToken: Optional[ClientRequestTokenString] = None
    DataAccessRoleArn: IamRoleArn
    DocumentClassifierName: ComprehendArnName
    InputDataConfig: DocumentClassifierInputDataConfig
    LanguageCode_1: LanguageCode = Field(..., alias='LanguageCode')
    Mode: Optional[DocumentClassifierMode] = None
    ModelKmsKeyId: Optional[KmsKeyId] = None
    ModelPolicy: Optional[Policy] = None
    OutputDataConfig: Optional[DocumentClassifierOutputDataConfig] = None
    Tags: Optional[TagList] = None
    VersionName_1: Optional[VersionName] = Field(None, alias='VersionName')
    VolumeKmsKeyId: Optional[KmsKeyId] = None
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class CreateEntityRecognizerRequest(BaseModel):
    ClientRequestToken: Optional[ClientRequestTokenString] = None
    DataAccessRoleArn: IamRoleArn
    InputDataConfig: EntityRecognizerInputDataConfig
    LanguageCode_1: LanguageCode = Field(..., alias='LanguageCode')
    ModelKmsKeyId: Optional[KmsKeyId] = None
    ModelPolicy: Optional[Policy] = None
    RecognizerName: ComprehendArnName
    Tags: Optional[TagList] = None
    VersionName_1: Optional[VersionName] = Field(None, alias='VersionName')
    VolumeKmsKeyId: Optional[KmsKeyId] = None
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class CreateFlywheelRequest(BaseModel):
    ActiveModelArn: Optional[ComprehendModelArn] = None
    ClientRequestToken: Optional[ClientRequestTokenString] = None
    DataAccessRoleArn: IamRoleArn
    DataLakeS3Uri: FlywheelS3Uri
    DataSecurityConfig_1: Optional[DataSecurityConfig] = Field(
        None, alias='DataSecurityConfig'
    )
    FlywheelName: ComprehendArnName
    ModelType_1: Optional[ModelType] = Field(None, alias='ModelType')
    Tags: Optional[TagList] = None
    TaskConfig_1: Optional[TaskConfig] = Field(None, alias='TaskConfig')


class DescribeDocumentClassificationJobResponse(BaseModel):
    DocumentClassificationJobProperties_1: Optional[
        DocumentClassificationJobProperties
    ] = Field(None, alias='DocumentClassificationJobProperties')


class DescribeDocumentClassifierResponse(BaseModel):
    DocumentClassifierProperties_1: Optional[DocumentClassifierProperties] = Field(
        None, alias='DocumentClassifierProperties'
    )


class DescribeDominantLanguageDetectionJobResponse(BaseModel):
    DominantLanguageDetectionJobProperties_1: Optional[
        DominantLanguageDetectionJobProperties
    ] = Field(None, alias='DominantLanguageDetectionJobProperties')


class DescribeEntitiesDetectionJobResponse(BaseModel):
    EntitiesDetectionJobProperties_1: Optional[EntitiesDetectionJobProperties] = Field(
        None, alias='EntitiesDetectionJobProperties'
    )


class DescribeEventsDetectionJobResponse(BaseModel):
    EventsDetectionJobProperties_1: Optional[EventsDetectionJobProperties] = Field(
        None, alias='EventsDetectionJobProperties'
    )


class DescribeKeyPhrasesDetectionJobResponse(BaseModel):
    KeyPhrasesDetectionJobProperties_1: Optional[KeyPhrasesDetectionJobProperties] = (
        Field(None, alias='KeyPhrasesDetectionJobProperties')
    )


class DescribePiiEntitiesDetectionJobResponse(BaseModel):
    PiiEntitiesDetectionJobProperties_1: Optional[PiiEntitiesDetectionJobProperties] = (
        Field(None, alias='PiiEntitiesDetectionJobProperties')
    )


class DetectPiiEntitiesResponse(BaseModel):
    Entities: Optional[ListOfPiiEntities] = None


class DetectSyntaxResponse(BaseModel):
    SyntaxTokens: Optional[ListOfSyntaxTokens] = None


class Entity(BaseModel):
    BeginOffset: Optional[Integer] = None
    BlockReferences: Optional[ListOfBlockReferences] = None
    EndOffset: Optional[Integer] = None
    Score: Optional[Float] = None
    Text: Optional[String] = None
    Type: Optional[EntityType] = None


class EntityRecognizerMetadata(BaseModel):
    EntityTypes: Optional[EntityRecognizerMetadataEntityTypesList] = None
    EvaluationMetrics: Optional[EntityRecognizerEvaluationMetrics] = None
    NumberOfTestDocuments: Optional[Integer] = None
    NumberOfTrainedDocuments: Optional[Integer] = None


class EntityRecognizerProperties(BaseModel):
    DataAccessRoleArn: Optional[IamRoleArn] = None
    EndTime: Optional[Timestamp] = None
    EntityRecognizerArn_1: Optional[EntityRecognizerArn] = Field(
        None, alias='EntityRecognizerArn'
    )
    FlywheelArn: Optional[ComprehendFlywheelArn] = None
    InputDataConfig: Optional[EntityRecognizerInputDataConfig] = None
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    Message: Optional[AnyLengthString] = None
    ModelKmsKeyId: Optional[KmsKeyId] = None
    OutputDataConfig: Optional[EntityRecognizerOutputDataConfig] = None
    RecognizerMetadata: Optional[EntityRecognizerMetadata] = None
    SourceModelArn: Optional[EntityRecognizerArn] = None
    Status: Optional[ModelStatus] = None
    SubmitTime: Optional[Timestamp] = None
    TrainingEndTime: Optional[Timestamp] = None
    TrainingStartTime: Optional[Timestamp] = None
    VersionName_1: Optional[VersionName] = Field(None, alias='VersionName')
    VolumeKmsKeyId: Optional[KmsKeyId] = None
    VpcConfig_1: Optional[VpcConfig] = Field(None, alias='VpcConfig')


class EntityRecognizerPropertiesList(RootModel[List[EntityRecognizerProperties]]):
    root: List[EntityRecognizerProperties]


class FlywheelProperties(BaseModel):
    ActiveModelArn: Optional[ComprehendModelArn] = None
    CreationTime: Optional[Timestamp] = None
    DataAccessRoleArn: Optional[IamRoleArn] = None
    DataLakeS3Uri: Optional[S3Uri] = None
    DataSecurityConfig_1: Optional[DataSecurityConfig] = Field(
        None, alias='DataSecurityConfig'
    )
    FlywheelArn: Optional[ComprehendFlywheelArn] = None
    LastModifiedTime: Optional[Timestamp] = None
    LatestFlywheelIteration: Optional[FlywheelIterationId] = None
    Message: Optional[AnyLengthString] = None
    ModelType_1: Optional[ModelType] = Field(None, alias='ModelType')
    Status: Optional[FlywheelStatus] = None
    TaskConfig_1: Optional[TaskConfig] = Field(None, alias='TaskConfig')


class ListEntityRecognizersResponse(BaseModel):
    EntityRecognizerPropertiesList_1: Optional[EntityRecognizerPropertiesList] = Field(
        None, alias='EntityRecognizerPropertiesList'
    )
    NextToken: Optional[String] = None


class ListOfBlocks(RootModel[List[Block]]):
    root: List[Block]


class ListOfDetectSyntaxResult(RootModel[List[BatchDetectSyntaxItemResult]]):
    root: List[BatchDetectSyntaxItemResult]


class ListOfEntities(RootModel[List[Entity]]):
    root: List[Entity]


class ListOfTargetedSentimentEntities(RootModel[List[TargetedSentimentEntity]]):
    root: List[TargetedSentimentEntity]


class ListPiiEntitiesDetectionJobsResponse(BaseModel):
    NextToken: Optional[String] = None
    PiiEntitiesDetectionJobPropertiesList_1: Optional[
        PiiEntitiesDetectionJobPropertiesList
    ] = Field(None, alias='PiiEntitiesDetectionJobPropertiesList')


class UpdateFlywheelResponse(BaseModel):
    FlywheelProperties_1: Optional[FlywheelProperties] = Field(
        None, alias='FlywheelProperties'
    )


class BatchDetectEntitiesItemResult(BaseModel):
    Entities: Optional[ListOfEntities] = None
    Index: Optional[Integer] = None


class BatchDetectSyntaxResponse(BaseModel):
    ErrorList: BatchItemErrorList
    ResultList: ListOfDetectSyntaxResult


class BatchDetectTargetedSentimentItemResult(BaseModel):
    Entities: Optional[ListOfTargetedSentimentEntities] = None
    Index: Optional[Integer] = None


class DescribeEntityRecognizerResponse(BaseModel):
    EntityRecognizerProperties_1: Optional[EntityRecognizerProperties] = Field(
        None, alias='EntityRecognizerProperties'
    )


class DescribeFlywheelResponse(BaseModel):
    FlywheelProperties_1: Optional[FlywheelProperties] = Field(
        None, alias='FlywheelProperties'
    )


class DetectEntitiesResponse(BaseModel):
    Blocks: Optional[ListOfBlocks] = None
    DocumentMetadata_1: Optional[DocumentMetadata] = Field(
        None, alias='DocumentMetadata'
    )
    DocumentType: Optional[ListOfDocumentType] = None
    Entities: Optional[ListOfEntities] = None
    Errors: Optional[ListOfErrors] = None


class DetectTargetedSentimentResponse(BaseModel):
    Entities: Optional[ListOfTargetedSentimentEntities] = None


class ListOfDetectEntitiesResult(RootModel[List[BatchDetectEntitiesItemResult]]):
    root: List[BatchDetectEntitiesItemResult]


class ListOfDetectTargetedSentimentResult(
    RootModel[List[BatchDetectTargetedSentimentItemResult]]
):
    root: List[BatchDetectTargetedSentimentItemResult]


class BatchDetectEntitiesResponse(BaseModel):
    ErrorList: BatchItemErrorList
    ResultList: ListOfDetectEntitiesResult


class BatchDetectTargetedSentimentResponse(BaseModel):
    ErrorList: BatchItemErrorList
    ResultList: ListOfDetectTargetedSentimentResult
