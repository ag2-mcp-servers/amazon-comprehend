# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:19:20+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Query

from models import (
    BatchDetectDominantLanguageRequest,
    BatchDetectDominantLanguageResponse,
    BatchDetectEntitiesRequest,
    BatchDetectEntitiesResponse,
    BatchDetectKeyPhrasesRequest,
    BatchDetectKeyPhrasesResponse,
    BatchDetectSentimentRequest,
    BatchDetectSentimentResponse,
    BatchDetectSyntaxRequest,
    BatchDetectSyntaxResponse,
    BatchDetectTargetedSentimentRequest,
    BatchDetectTargetedSentimentResponse,
    BatchSizeLimitExceededException,
    ClassifyDocumentRequest,
    ClassifyDocumentResponse,
    ConcurrentModificationException,
    ContainsPiiEntitiesRequest,
    ContainsPiiEntitiesResponse,
    CreateDatasetRequest,
    CreateDatasetResponse,
    CreateDocumentClassifierRequest,
    CreateDocumentClassifierResponse,
    CreateEndpointRequest,
    CreateEndpointResponse,
    CreateEntityRecognizerRequest,
    CreateEntityRecognizerResponse,
    CreateFlywheelRequest,
    CreateFlywheelResponse,
    DeleteDocumentClassifierRequest,
    DeleteDocumentClassifierResponse,
    DeleteEndpointRequest,
    DeleteEndpointResponse,
    DeleteEntityRecognizerRequest,
    DeleteEntityRecognizerResponse,
    DeleteFlywheelRequest,
    DeleteFlywheelResponse,
    DeleteResourcePolicyRequest,
    DeleteResourcePolicyResponse,
    DescribeDatasetRequest,
    DescribeDatasetResponse,
    DescribeDocumentClassificationJobRequest,
    DescribeDocumentClassificationJobResponse,
    DescribeDocumentClassifierRequest,
    DescribeDocumentClassifierResponse,
    DescribeDominantLanguageDetectionJobRequest,
    DescribeDominantLanguageDetectionJobResponse,
    DescribeEndpointRequest,
    DescribeEndpointResponse,
    DescribeEntitiesDetectionJobRequest,
    DescribeEntitiesDetectionJobResponse,
    DescribeEntityRecognizerRequest,
    DescribeEntityRecognizerResponse,
    DescribeEventsDetectionJobRequest,
    DescribeEventsDetectionJobResponse,
    DescribeFlywheelIterationRequest,
    DescribeFlywheelIterationResponse,
    DescribeFlywheelRequest,
    DescribeFlywheelResponse,
    DescribeKeyPhrasesDetectionJobRequest,
    DescribeKeyPhrasesDetectionJobResponse,
    DescribePiiEntitiesDetectionJobRequest,
    DescribePiiEntitiesDetectionJobResponse,
    DescribeResourcePolicyRequest,
    DescribeResourcePolicyResponse,
    DescribeSentimentDetectionJobRequest,
    DescribeSentimentDetectionJobResponse,
    DescribeTargetedSentimentDetectionJobRequest,
    DescribeTargetedSentimentDetectionJobResponse,
    DescribeTopicsDetectionJobRequest,
    DescribeTopicsDetectionJobResponse,
    DetectDominantLanguageRequest,
    DetectDominantLanguageResponse,
    DetectEntitiesRequest,
    DetectEntitiesResponse,
    DetectKeyPhrasesRequest,
    DetectKeyPhrasesResponse,
    DetectPiiEntitiesRequest,
    DetectPiiEntitiesResponse,
    DetectSentimentRequest,
    DetectSentimentResponse,
    DetectSyntaxRequest,
    DetectSyntaxResponse,
    DetectTargetedSentimentRequest,
    DetectTargetedSentimentResponse,
    ImportModelRequest,
    ImportModelResponse,
    InternalServerException,
    InvalidFilterException,
    InvalidRequestException,
    JobNotFoundException,
    KmsKeyValidationException,
    ListDatasetsRequest,
    ListDatasetsResponse,
    ListDocumentClassificationJobsRequest,
    ListDocumentClassificationJobsResponse,
    ListDocumentClassifiersRequest,
    ListDocumentClassifiersResponse,
    ListDocumentClassifierSummariesRequest,
    ListDocumentClassifierSummariesResponse,
    ListDominantLanguageDetectionJobsRequest,
    ListDominantLanguageDetectionJobsResponse,
    ListEndpointsRequest,
    ListEndpointsResponse,
    ListEntitiesDetectionJobsRequest,
    ListEntitiesDetectionJobsResponse,
    ListEntityRecognizersRequest,
    ListEntityRecognizersResponse,
    ListEntityRecognizerSummariesRequest,
    ListEntityRecognizerSummariesResponse,
    ListEventsDetectionJobsRequest,
    ListEventsDetectionJobsResponse,
    ListFlywheelIterationHistoryRequest,
    ListFlywheelIterationHistoryResponse,
    ListFlywheelsRequest,
    ListFlywheelsResponse,
    ListKeyPhrasesDetectionJobsRequest,
    ListKeyPhrasesDetectionJobsResponse,
    ListPiiEntitiesDetectionJobsRequest,
    ListPiiEntitiesDetectionJobsResponse,
    ListSentimentDetectionJobsRequest,
    ListSentimentDetectionJobsResponse,
    ListTagsForResourceRequest,
    ListTagsForResourceResponse,
    ListTargetedSentimentDetectionJobsRequest,
    ListTargetedSentimentDetectionJobsResponse,
    ListTopicsDetectionJobsRequest,
    ListTopicsDetectionJobsResponse,
    PutResourcePolicyRequest,
    PutResourcePolicyResponse,
    ResourceInUseException,
    ResourceLimitExceededException,
    ResourceNotFoundException,
    ResourceUnavailableException,
    StartDocumentClassificationJobRequest,
    StartDocumentClassificationJobResponse,
    StartDominantLanguageDetectionJobRequest,
    StartDominantLanguageDetectionJobResponse,
    StartEntitiesDetectionJobRequest,
    StartEntitiesDetectionJobResponse,
    StartEventsDetectionJobRequest,
    StartEventsDetectionJobResponse,
    StartFlywheelIterationRequest,
    StartFlywheelIterationResponse,
    StartKeyPhrasesDetectionJobRequest,
    StartKeyPhrasesDetectionJobResponse,
    StartPiiEntitiesDetectionJobRequest,
    StartPiiEntitiesDetectionJobResponse,
    StartSentimentDetectionJobRequest,
    StartSentimentDetectionJobResponse,
    StartTargetedSentimentDetectionJobRequest,
    StartTargetedSentimentDetectionJobResponse,
    StartTopicsDetectionJobRequest,
    StartTopicsDetectionJobResponse,
    StopDominantLanguageDetectionJobRequest,
    StopDominantLanguageDetectionJobResponse,
    StopEntitiesDetectionJobRequest,
    StopEntitiesDetectionJobResponse,
    StopEventsDetectionJobRequest,
    StopEventsDetectionJobResponse,
    StopKeyPhrasesDetectionJobRequest,
    StopKeyPhrasesDetectionJobResponse,
    StopPiiEntitiesDetectionJobRequest,
    StopPiiEntitiesDetectionJobResponse,
    StopSentimentDetectionJobRequest,
    StopSentimentDetectionJobResponse,
    StopTargetedSentimentDetectionJobRequest,
    StopTargetedSentimentDetectionJobResponse,
    StopTrainingDocumentClassifierRequest,
    StopTrainingDocumentClassifierResponse,
    StopTrainingEntityRecognizerRequest,
    StopTrainingEntityRecognizerResponse,
    TagResourceRequest,
    TagResourceResponse,
    TextSizeLimitExceededException,
    TooManyRequestsException,
    TooManyTagKeysException,
    TooManyTagsException,
    UnsupportedLanguageException,
    UntagResourceRequest,
    UntagResourceResponse,
    UpdateEndpointRequest,
    UpdateEndpointResponse,
    UpdateFlywheelRequest,
    UpdateFlywheelResponse,
    XAmzTarget,
    XAmzTarget1,
    XAmzTarget2,
    XAmzTarget3,
    XAmzTarget4,
    XAmzTarget5,
    XAmzTarget6,
    XAmzTarget7,
    XAmzTarget8,
    XAmzTarget9,
    XAmzTarget10,
    XAmzTarget11,
    XAmzTarget12,
    XAmzTarget13,
    XAmzTarget14,
    XAmzTarget15,
    XAmzTarget16,
    XAmzTarget17,
    XAmzTarget18,
    XAmzTarget19,
    XAmzTarget20,
    XAmzTarget21,
    XAmzTarget22,
    XAmzTarget23,
    XAmzTarget24,
    XAmzTarget25,
    XAmzTarget26,
    XAmzTarget27,
    XAmzTarget28,
    XAmzTarget29,
    XAmzTarget30,
    XAmzTarget31,
    XAmzTarget32,
    XAmzTarget33,
    XAmzTarget34,
    XAmzTarget35,
    XAmzTarget36,
    XAmzTarget37,
    XAmzTarget38,
    XAmzTarget39,
    XAmzTarget40,
    XAmzTarget41,
    XAmzTarget42,
    XAmzTarget43,
    XAmzTarget44,
    XAmzTarget45,
    XAmzTarget46,
    XAmzTarget47,
    XAmzTarget48,
    XAmzTarget49,
    XAmzTarget50,
    XAmzTarget51,
    XAmzTarget52,
    XAmzTarget53,
    XAmzTarget54,
    XAmzTarget55,
    XAmzTarget56,
    XAmzTarget57,
    XAmzTarget58,
    XAmzTarget59,
    XAmzTarget60,
    XAmzTarget61,
    XAmzTarget62,
    XAmzTarget63,
    XAmzTarget64,
    XAmzTarget65,
    XAmzTarget66,
    XAmzTarget67,
    XAmzTarget68,
    XAmzTarget69,
    XAmzTarget70,
    XAmzTarget71,
    XAmzTarget72,
    XAmzTarget73,
    XAmzTarget74,
    XAmzTarget75,
    XAmzTarget76,
    XAmzTarget77,
    XAmzTarget78,
    XAmzTarget79,
    XAmzTarget80,
    XAmzTarget81,
    XAmzTarget82,
    XAmzTarget83,
)

app = MCPProxy(
    contact={
        'email': 'mike.ralphson@gmail.com',
        'name': 'Mike Ralphson',
        'url': 'https://github.com/mermade/aws2openapi',
        'x-twitter': 'PermittedSoc',
    },
    description='Amazon Comprehend is an Amazon Web Services service for gaining insight into the content of documents. Use these actions to determine the topics contained in your documents, the topics they discuss, the predominant sentiment expressed in them, the predominant language used, and more.',
    license={'name': 'Apache 2.0 License', 'url': 'http://www.apache.org/licenses/'},
    termsOfService='https://aws.amazon.com/service-terms/',
    title='Amazon Comprehend',
    version='2017-11-27',
    servers=[
        {
            'description': 'The Amazon Comprehend multi-region endpoint',
            'url': 'http://comprehend.{region}.amazonaws.com',
            'variables': {
                'region': {
                    'default': 'us-east-1',
                    'description': 'The AWS region',
                    'enum': [
                        'us-east-1',
                        'us-east-2',
                        'us-west-1',
                        'us-west-2',
                        'us-gov-west-1',
                        'us-gov-east-1',
                        'ca-central-1',
                        'eu-north-1',
                        'eu-west-1',
                        'eu-west-2',
                        'eu-west-3',
                        'eu-central-1',
                        'eu-south-1',
                        'af-south-1',
                        'ap-northeast-1',
                        'ap-northeast-2',
                        'ap-northeast-3',
                        'ap-southeast-1',
                        'ap-southeast-2',
                        'ap-east-1',
                        'ap-south-1',
                        'sa-east-1',
                        'me-south-1',
                    ],
                }
            },
        },
        {
            'description': 'The Amazon Comprehend multi-region endpoint',
            'url': 'https://comprehend.{region}.amazonaws.com',
            'variables': {
                'region': {
                    'default': 'us-east-1',
                    'description': 'The AWS region',
                    'enum': [
                        'us-east-1',
                        'us-east-2',
                        'us-west-1',
                        'us-west-2',
                        'us-gov-west-1',
                        'us-gov-east-1',
                        'ca-central-1',
                        'eu-north-1',
                        'eu-west-1',
                        'eu-west-2',
                        'eu-west-3',
                        'eu-central-1',
                        'eu-south-1',
                        'af-south-1',
                        'ap-northeast-1',
                        'ap-northeast-2',
                        'ap-northeast-3',
                        'ap-southeast-1',
                        'ap-southeast-2',
                        'ap-east-1',
                        'ap-south-1',
                        'sa-east-1',
                        'me-south-1',
                    ],
                }
            },
        },
        {
            'description': 'The Amazon Comprehend endpoint for China (Beijing) and China (Ningxia)',
            'url': 'http://comprehend.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
        {
            'description': 'The Amazon Comprehend endpoint for China (Beijing) and China (Ningxia)',
            'url': 'https://comprehend.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
    ],
)


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.BatchDetectDominantLanguage',
    description=""" Determines the dominant language of the input text for a batch of documents. For a list of languages that Amazon Comprehend can detect, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html">Amazon Comprehend Supported Languages</a>.  """,
    tags=['language_detection', 'language_detection_handling', 'nlp_job_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_detect_dominant_language(
    x__amz__target: XAmzTarget = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: BatchDetectDominantLanguageRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.BatchDetectEntities',
    description=""" Inspects the text of a batch of documents for named entities and returns information about them. For more information about named entities, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-entities.html">Entities</a> in the Comprehend Developer Guide.  """,
    tags=['entity_detection_handling', 'endpoint_configuration'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_detect_entities(
    x__amz__target: XAmzTarget1 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: BatchDetectEntitiesRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.BatchDetectKeyPhrases',
    description=""" Detects the key noun phrases found in a batch of documents. """,
    tags=['text_insight_extraction', 'entity_detection_handling', 'nlp_job_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_detect_key_phrases(
    x__amz__target: XAmzTarget2 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: BatchDetectKeyPhrasesRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.BatchDetectSentiment',
    description=""" Inspects a batch of documents and returns an inference of the prevailing sentiment, <code>POSITIVE</code>, <code>NEUTRAL</code>, <code>MIXED</code>, or <code>NEGATIVE</code>, in each one. """,
    tags=[
        'text_insight_extraction',
        'sentiment_analysis_operations',
        'nlp_job_control',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_detect_sentiment(
    x__amz__target: XAmzTarget3 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: BatchDetectSentimentRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.BatchDetectSyntax',
    description=""" Inspects the text of a batch of documents for the syntax and part of speech of the words in the document and returns information about them. For more information, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-syntax.html">Syntax</a> in the Comprehend Developer Guide.  """,
    tags=['endpoint_configuration', 'job_management_general'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_detect_syntax(
    x__amz__target: XAmzTarget4 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: BatchDetectSyntaxRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.BatchDetectTargetedSentiment',
    description=""" <p>Inspects a batch of documents and returns a sentiment analysis for each entity identified in the documents.</p> <p>For more information about targeted sentiment, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-targeted-sentiment.html">Targeted sentiment</a>.</p> """,
    tags=[
        'sentiment_analysis_operations',
        'text_insight_extraction',
        'nlp_job_control',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def batch_detect_targeted_sentiment(
    x__amz__target: XAmzTarget5 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: BatchDetectTargetedSentimentRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.ClassifyDocument',
    description=""" <p>Creates a new document classification request to analyze a single document in real-time, using a previously created and trained custom model and an endpoint.</p> <p>You can input plain text or you can upload a single-page input document (text, PDF, Word, or image). </p> <p>If the system detects errors while processing a page in the input document, the API response includes an entry in <code>Errors</code> that describes the errors.</p> <p>If the system detects a document-level error in your input document, the API returns an <code>InvalidRequestException</code> error response. For details about this exception, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/idp-inputs-sync-err.html"> Errors in semi-structured documents</a> in the Comprehend Developer Guide. </p> """,
    tags=[
        'endpoint_configuration',
        'resource_policy_control',
        'resource_policy_administration',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def classify_document(
    x__amz__target: XAmzTarget6 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ClassifyDocumentRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.ContainsPiiEntities',
    description=""" Analyzes input text for the presence of personally identifiable information (PII) and returns the labels of identified PII entity types such as name, address, bank account number, or phone number. """,
    tags=[
        'endpoint_configuration',
        'resource_policy_control',
        'resource_policy_administration',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def contains_pii_entities(
    x__amz__target: XAmzTarget7 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ContainsPiiEntitiesRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.CreateDataset',
    description=""" Creates a dataset to upload training or test data for a model associated with a flywheel. For more information about datasets, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/flywheels-about.html"> Flywheel overview</a> in the <i>Amazon Comprehend Developer Guide</i>. """,
    tags=[
        'dataset_operations',
        'resource_policy_control',
        'resource_policy_administration',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_dataset(
    x__amz__target: XAmzTarget8 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: CreateDatasetRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.CreateDocumentClassifier',
    description=""" Creates a new document classifier that you can use to categorize documents. To create a classifier, you provide a set of training documents that are labeled with the categories that you want to use. For more information, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/training-classifier-model.html">Training classifier models</a> in the Comprehend Developer Guide.  """,
    tags=[
        'document_classifier_management',
        'dataset_and_classifier_overview',
        'nlp_job_control',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_document_classifier(
    x__amz__target: XAmzTarget9 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: CreateDocumentClassifierRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.CreateEndpoint',
    description=""" Creates a model-specific endpoint for synchronous inference for a previously trained custom model For information about endpoints, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/manage-endpoints.html">Managing endpoints</a>. """,
    tags=['endpoint_configuration', 'resource_policy_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_endpoint(
    x__amz__target: XAmzTarget10 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: CreateEndpointRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.CreateEntityRecognizer',
    description=""" Creates an entity recognizer using submitted files. After your <code>CreateEntityRecognizer</code> request is submitted, you can check job status using the <code>DescribeEntityRecognizer</code> API.  """,
    tags=[
        'entity_recognition_management',
        'document_classifier_management',
        'endpoint_configuration',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_entity_recognizer(
    x__amz__target: XAmzTarget11 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: CreateEntityRecognizerRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.CreateFlywheel',
    description=""" <p>A flywheel is an Amazon Web Services resource that orchestrates the ongoing training of a model for custom classification or custom entity recognition. You can create a flywheel to start with an existing trained model, or Comprehend can create and train a new model.</p> <p>When you create the flywheel, Comprehend creates a data lake in your account. The data lake holds the training data and test data for all versions of the model.</p> <p>To use a flywheel with an existing trained model, you specify the active model version. Comprehend copies the model's training data and test data into the flywheel's data lake.</p> <p>To use the flywheel with a new model, you need to provide a dataset for training data (and optional test data) when you create the flywheel.</p> <p>For more information about flywheels, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/flywheels-about.html"> Flywheel overview</a> in the <i>Amazon Comprehend Developer Guide</i>.</p> """,
    tags=['flywheel_iteration_management', 'endpoint_configuration'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_flywheel(
    x__amz__target: XAmzTarget12 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: CreateFlywheelRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.DeleteDocumentClassifier',
    description=""" <p>Deletes a previously created document classifier</p> <p>Only those classifiers that are in terminated states (IN_ERROR, TRAINED) will be deleted. If an active inference job is using the model, a <code>ResourceInUseException</code> will be returned.</p> <p>This is an asynchronous action that puts the classifier into a DELETING state, and it is then removed by a background job. Once removed, the classifier disappears from your account and is no longer available for use. </p> """,
    tags=[
        'document_classifier_management',
        'dataset_and_classifier_overview',
        'job_management_general',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_document_classifier(
    x__amz__target: XAmzTarget13 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DeleteDocumentClassifierRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.DeleteEndpoint',
    description=""" Deletes a model-specific endpoint for a previously-trained custom model. All endpoints must be deleted in order for the model to be deleted. For information about endpoints, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/manage-endpoints.html">Managing endpoints</a>. """,
    tags=['endpoint_configuration', 'resource_policy_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_endpoint(
    x__amz__target: XAmzTarget14 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DeleteEndpointRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.DeleteEntityRecognizer',
    description=""" <p>Deletes an entity recognizer.</p> <p>Only those recognizers that are in terminated states (IN_ERROR, TRAINED) will be deleted. If an active inference job is using the model, a <code>ResourceInUseException</code> will be returned.</p> <p>This is an asynchronous action that puts the recognizer into a DELETING state, and it is then removed by a background job. Once removed, the recognizer disappears from your account and is no longer available for use. </p> """,
    tags=[
        'entity_recognition_management',
        'resource_policy_control',
        'resource_policy_administration',
        'nlp_job_control',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_entity_recognizer(
    x__amz__target: XAmzTarget15 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DeleteEntityRecognizerRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.DeleteFlywheel',
    description=""" <p>Deletes a flywheel. When you delete the flywheel, Amazon Comprehend does not delete the data lake or the model associated with the flywheel.</p> <p>For more information about flywheels, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/flywheels-about.html"> Flywheel overview</a> in the <i>Amazon Comprehend Developer Guide</i>.</p> """,
    tags=[
        'flywheel_iteration_management',
        'endpoint_configuration',
        'resource_policy_control',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_flywheel(
    x__amz__target: XAmzTarget16 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DeleteFlywheelRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.DeleteResourcePolicy',
    description=""" Deletes a resource-based policy that is attached to a custom model. """,
    tags=['resource_policy_control', 'resource_policy_administration'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_resource_policy(
    x__amz__target: XAmzTarget17 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DeleteResourcePolicyRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.DescribeDataset',
    description=""" Returns information about the dataset that you specify. For more information about datasets, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/flywheels-about.html"> Flywheel overview</a> in the <i>Amazon Comprehend Developer Guide</i>. """,
    tags=['dataset_operations', 'dataset_and_classifier_overview'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_dataset(
    x__amz__target: XAmzTarget18 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DescribeDatasetRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.DescribeDocumentClassificationJob',
    description=""" Gets the properties associated with a document classification job. Use this operation to get the status of a classification job. """,
    tags=[
        'document_classifier_management',
        'classification_job_overview',
        'dataset_and_classifier_overview',
        'job_management_general',
        'nlp_job_control',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_document_classification_job(
    x__amz__target: XAmzTarget19 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DescribeDocumentClassificationJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.DescribeDocumentClassifier',
    description=""" Gets the properties associated with a document classifier. """,
    tags=[
        'document_classifier_management',
        'dataset_and_classifier_overview',
        'nlp_job_control',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_document_classifier(
    x__amz__target: XAmzTarget20 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DescribeDocumentClassifierRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.DescribeDominantLanguageDetectionJob',
    description=""" Gets the properties associated with a dominant language detection job. Use this operation to get the status of a detection job. """,
    tags=[
        'language_detection',
        'language_detection_handling',
        'classification_job_overview',
        'nlp_job_control',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_dominant_language_detection_job(
    x__amz__target: XAmzTarget21 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DescribeDominantLanguageDetectionJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.DescribeEndpoint',
    description=""" Gets the properties associated with a specific endpoint. Use this operation to get the status of an endpoint. For information about endpoints, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/manage-endpoints.html">Managing endpoints</a>. """,
    tags=['endpoint_configuration', 'resource_policy_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_endpoint(
    x__amz__target: XAmzTarget22 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DescribeEndpointRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.DescribeEntitiesDetectionJob',
    description=""" Gets the properties associated with an entities detection job. Use this operation to get the status of a detection job. """,
    tags=[
        'classification_job_overview',
        'entity_detection_handling',
        'job_management_general',
        'nlp_job_control',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_entities_detection_job(
    x__amz__target: XAmzTarget23 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DescribeEntitiesDetectionJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.DescribeEntityRecognizer',
    description=""" Provides details about an entity recognizer including status, S3 buckets containing training data, recognizer metadata, metrics, and so on. """,
    tags=['entity_recognition_management', 'nlp_job_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_entity_recognizer(
    x__amz__target: XAmzTarget24 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DescribeEntityRecognizerRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.DescribeEventsDetectionJob',
    description=""" Gets the status and details of an events detection job. """,
    tags=['classification_job_overview', 'job_management_general', 'nlp_job_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_events_detection_job(
    x__amz__target: XAmzTarget25 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DescribeEventsDetectionJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.DescribeFlywheel',
    description=""" Provides configuration information about the flywheel. For more information about flywheels, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/flywheels-about.html"> Flywheel overview</a> in the <i>Amazon Comprehend Developer Guide</i>. """,
    tags=[
        'endpoint_configuration',
        'flywheel_iteration_management',
        'dataset_operations',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_flywheel(
    x__amz__target: XAmzTarget26 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DescribeFlywheelRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.DescribeFlywheelIteration',
    description=""" Retrieve the configuration properties of a flywheel iteration. For more information about flywheels, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/flywheels-about.html"> Flywheel overview</a> in the <i>Amazon Comprehend Developer Guide</i>. """,
    tags=['flywheel_iteration_management', 'endpoint_configuration'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_flywheel_iteration(
    x__amz__target: XAmzTarget27 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DescribeFlywheelIterationRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.DescribeKeyPhrasesDetectionJob',
    description=""" Gets the properties associated with a key phrases detection job. Use this operation to get the status of a detection job. """,
    tags=[
        'text_insight_extraction',
        'entity_detection_handling',
        'nlp_job_control',
        'classification_job_overview',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_key_phrases_detection_job(
    x__amz__target: XAmzTarget28 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DescribeKeyPhrasesDetectionJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.DescribePiiEntitiesDetectionJob',
    description=""" Gets the properties associated with a PII entities detection job. For example, you can use this operation to get the job status. """,
    tags=[
        'entity_detection_handling',
        'classification_job_overview',
        'job_management_general',
        'nlp_job_control',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_pii_entities_detection_job(
    x__amz__target: XAmzTarget29 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DescribePiiEntitiesDetectionJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.DescribeResourcePolicy',
    description=""" Gets the details of a resource-based policy that is attached to a custom model, including the JSON body of the policy. """,
    tags=['resource_policy_control', 'resource_policy_administration'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_resource_policy(
    x__amz__target: XAmzTarget30 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DescribeResourcePolicyRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.DescribeSentimentDetectionJob',
    description=""" Gets the properties associated with a sentiment detection job. Use this operation to get the status of a detection job. """,
    tags=['sentiment_analysis_operations', 'nlp_job_control', 'job_management_general'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_sentiment_detection_job(
    x__amz__target: XAmzTarget31 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DescribeSentimentDetectionJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.DescribeTargetedSentimentDetectionJob',
    description=""" Gets the properties associated with a targeted sentiment detection job. Use this operation to get the status of the job. """,
    tags=[
        'sentiment_analysis_operations',
        'nlp_job_control',
        'classification_job_overview',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_targeted_sentiment_detection_job(
    x__amz__target: XAmzTarget32 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DescribeTargetedSentimentDetectionJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.DescribeTopicsDetectionJob',
    description=""" Gets the properties associated with a topic detection job. Use this operation to get the status of a detection job. """,
    tags=[
        'topic_detection_operations',
        'nlp_job_control',
        'classification_job_overview',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_topics_detection_job(
    x__amz__target: XAmzTarget33 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DescribeTopicsDetectionJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.DetectDominantLanguage',
    description=""" Determines the dominant language of the input text. For a list of languages that Amazon Comprehend can detect, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html">Amazon Comprehend Supported Languages</a>.  """,
    tags=['language_detection', 'language_detection_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def detect_dominant_language(
    x__amz__target: XAmzTarget34 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DetectDominantLanguageRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.DetectEntities',
    description=""" <p>Detects named entities in input text when you use the pre-trained model. Detects custom entities if you have a custom entity recognition model. </p> <p> When detecting named entities using the pre-trained model, use plain text as the input. For more information about named entities, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-entities.html">Entities</a> in the Comprehend Developer Guide.</p> <p>When you use a custom entity recognition model, you can input plain text or you can upload a single-page input document (text, PDF, Word, or image). </p> <p>If the system detects errors while processing a page in the input document, the API response includes an entry in <code>Errors</code> for each error. </p> <p>If the system detects a document-level error in your input document, the API returns an <code>InvalidRequestException</code> error response. For details about this exception, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/idp-inputs-sync-err.html"> Errors in semi-structured documents</a> in the Comprehend Developer Guide. </p> """,
    tags=[
        'entity_detection_handling',
        'resource_policy_control',
        'endpoint_configuration',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def detect_entities(
    x__amz__target: XAmzTarget35 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DetectEntitiesRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.DetectKeyPhrases',
    description=""" Detects the key noun phrases found in the text.  """,
    tags=['text_insight_extraction', 'entity_detection_handling', 'nlp_job_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def detect_key_phrases(
    x__amz__target: XAmzTarget36 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DetectKeyPhrasesRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.DetectPiiEntities',
    description=""" Inspects the input text for entities that contain personally identifiable information (PII) and returns information about them. """,
    tags=[
        'entity_detection_handling',
        'entity_recognition_management',
        'text_insight_extraction',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def detect_pii_entities(
    x__amz__target: XAmzTarget37 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DetectPiiEntitiesRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.DetectSentiment',
    description=""" Inspects text and returns an inference of the prevailing sentiment (<code>POSITIVE</code>, <code>NEUTRAL</code>, <code>MIXED</code>, or <code>NEGATIVE</code>).  """,
    tags=[
        'sentiment_analysis_operations',
        'text_insight_extraction',
        'nlp_job_control',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def detect_sentiment(
    x__amz__target: XAmzTarget38 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DetectSentimentRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.DetectSyntax',
    description=""" Inspects text for syntax and the part of speech of words in the document. For more information, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-syntax.html">Syntax</a> in the Comprehend Developer Guide.  """,
    tags=['language_detection', 'text_insight_extraction', 'nlp_job_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def detect_syntax(
    x__amz__target: XAmzTarget39 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DetectSyntaxRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.DetectTargetedSentiment',
    description=""" <p>Inspects the input text and returns a sentiment analysis for each entity identified in the text.</p> <p>For more information about targeted sentiment, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-targeted-sentiment.html">Targeted sentiment</a>.</p> """,
    tags=[
        'sentiment_analysis_operations',
        'text_insight_extraction',
        'nlp_job_control',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def detect_targeted_sentiment(
    x__amz__target: XAmzTarget40 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: DetectTargetedSentimentRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.ImportModel',
    description=""" <p>Creates a new custom model that replicates a source custom model that you import. The source model can be in your Amazon Web Services account or another one.</p> <p>If the source model is in another Amazon Web Services account, then it must have a resource-based policy that authorizes you to import it.</p> <p>The source model must be in the same Amazon Web Services Region that you're using when you import. You can't import a model that's in a different Region.</p> """,
    tags=['endpoint_configuration', 'resource_policy_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def import_model(
    x__amz__target: XAmzTarget41 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ImportModelRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.ListDatasets',
    description=""" List the datasets that you have configured in this Region. For more information about datasets, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/flywheels-about.html"> Flywheel overview</a> in the <i>Amazon Comprehend Developer Guide</i>. """,
    tags=['dataset_operations', 'endpoint_configuration'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_datasets(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget42 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ListDatasetsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.ListDocumentClassificationJobs',
    description=""" Gets a list of the documentation classification jobs that you have submitted. """,
    tags=[
        'document_classifier_management',
        'classification_job_overview',
        'dataset_and_classifier_overview',
        'job_management_general',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_document_classification_jobs(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget43 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ListDocumentClassificationJobsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.ListDocumentClassifierSummaries',
    description=""" Gets a list of summaries of the document classifiers that you have created """,
    tags=[
        'document_classifier_management',
        'dataset_and_classifier_overview',
        'job_management_general',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_document_classifier_summaries(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget44 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ListDocumentClassifierSummariesRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.ListDocumentClassifiers',
    description=""" Gets a list of the document classifiers that you have created. """,
    tags=[
        'document_classifier_management',
        'dataset_and_classifier_overview',
        'nlp_job_control',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_document_classifiers(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget45 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ListDocumentClassifiersRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.ListDominantLanguageDetectionJobs',
    description=""" Gets a list of the dominant language detection jobs that you have submitted. """,
    tags=[
        'language_detection',
        'language_detection_handling',
        'job_management_general',
        'nlp_job_control',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_dominant_language_detection_jobs(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget46 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ListDominantLanguageDetectionJobsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.ListEndpoints',
    description=""" Gets a list of all existing endpoints that you've created. For information about endpoints, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/manage-endpoints.html">Managing endpoints</a>. """,
    tags=['endpoint_configuration'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_endpoints(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget47 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ListEndpointsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.ListEntitiesDetectionJobs',
    description=""" Gets a list of the entity detection jobs that you have submitted. """,
    tags=[
        'entity_detection_handling',
        'classification_job_overview',
        'job_management_general',
        'nlp_job_control',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_entities_detection_jobs(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget48 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ListEntitiesDetectionJobsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.ListEntityRecognizerSummaries',
    description=""" Gets a list of summaries for the entity recognizers that you have created. """,
    tags=[
        'entity_recognition_management',
        'endpoint_configuration',
        'dataset_operations',
        'job_management_general',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_entity_recognizer_summaries(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget49 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ListEntityRecognizerSummariesRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.ListEntityRecognizers',
    description=""" <p>Gets a list of the properties of all entity recognizers that you created, including recognizers currently in training. Allows you to filter the list of recognizers based on criteria such as status and submission time. This call returns up to 500 entity recognizers in the list, with a default number of 100 recognizers in the list.</p> <p>The results of this list are not in any particular order. Please get the list and sort locally if needed.</p> """,
    tags=['entity_recognition_management', 'nlp_job_control', 'job_management_general'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_entity_recognizers(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget50 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ListEntityRecognizersRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.ListEventsDetectionJobs',
    description=""" Gets a list of the events detection jobs that you have submitted. """,
    tags=['classification_job_overview', 'job_management_general', 'nlp_job_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_events_detection_jobs(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget51 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ListEventsDetectionJobsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.ListFlywheelIterationHistory',
    description=""" Information about the history of a flywheel iteration. For more information about flywheels, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/flywheels-about.html"> Flywheel overview</a> in the <i>Amazon Comprehend Developer Guide</i>. """,
    tags=['flywheel_iteration_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_flywheel_iteration_history(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget52 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ListFlywheelIterationHistoryRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.ListFlywheels',
    description=""" Gets a list of the flywheels that you have created. """,
    tags=['flywheel_iteration_management', 'endpoint_configuration'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_flywheels(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget53 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ListFlywheelsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.ListKeyPhrasesDetectionJobs',
    description=""" Get a list of key phrase detection jobs that you have submitted. """,
    tags=[
        'text_insight_extraction',
        'classification_job_overview',
        'job_management_general',
        'nlp_job_control',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_key_phrases_detection_jobs(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget54 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ListKeyPhrasesDetectionJobsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.ListPiiEntitiesDetectionJobs',
    description=""" Gets a list of the PII entity detection jobs that you have submitted. """,
    tags=['endpoint_configuration', 'job_management_general', 'nlp_job_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_pii_entities_detection_jobs(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget55 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ListPiiEntitiesDetectionJobsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.ListSentimentDetectionJobs',
    description=""" Gets a list of sentiment detection jobs that you have submitted. """,
    tags=['sentiment_analysis_operations', 'nlp_job_control', 'job_management_general'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_sentiment_detection_jobs(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget56 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ListSentimentDetectionJobsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.ListTagsForResource',
    description=""" Lists all tags associated with a given Amazon Comprehend resource.  """,
    tags=['resource_tag_handling', 'resource_tagging_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_tags_for_resource(
    x__amz__target: XAmzTarget57 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ListTagsForResourceRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.ListTargetedSentimentDetectionJobs',
    description=""" Gets a list of targeted sentiment detection jobs that you have submitted. """,
    tags=['sentiment_analysis_operations', 'job_management_general', 'nlp_job_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_targeted_sentiment_detection_jobs(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget58 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ListTargetedSentimentDetectionJobsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.ListTopicsDetectionJobs',
    description=""" Gets a list of the topic detection jobs that you have submitted. """,
    tags=['topic_detection_operations', 'job_management_general', 'nlp_job_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_topics_detection_jobs(
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__target: XAmzTarget59 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ListTopicsDetectionJobsRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.PutResourcePolicy',
    description=""" Attaches a resource-based policy to a custom model. You can use this policy to authorize an entity in another Amazon Web Services account to import the custom model, which replicates it in Amazon Comprehend in their account. """,
    tags=['resource_policy_control', 'resource_policy_administration'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def put_resource_policy(
    x__amz__target: XAmzTarget60 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: PutResourcePolicyRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.StartDocumentClassificationJob',
    description=""" Starts an asynchronous document classification job. Use the <code>DescribeDocumentClassificationJob</code> operation to track the progress of the job. """,
    tags=[
        'document_classifier_management',
        'classification_job_overview',
        'nlp_job_control',
        'job_management_general',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_document_classification_job(
    x__amz__target: XAmzTarget61 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: StartDocumentClassificationJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.StartDominantLanguageDetectionJob',
    description=""" Starts an asynchronous dominant language detection job for a collection of documents. Use the operation to track the status of a job. """,
    tags=[
        'language_detection',
        'language_detection_handling',
        'nlp_job_control',
        'job_management_general',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_dominant_language_detection_job(
    x__amz__target: XAmzTarget62 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: StartDominantLanguageDetectionJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.StartEntitiesDetectionJob',
    description=""" <p>Starts an asynchronous entity detection job for a collection of documents. Use the operation to track the status of a job.</p> <p>This API can be used for either standard entity detection or custom entity recognition. In order to be used for custom entity recognition, the optional <code>EntityRecognizerArn</code> must be used in order to provide access to the recognizer being used to detect the custom entity.</p> """,
    tags=[
        'job_management_general',
        'nlp_job_control',
        'classification_job_overview',
        'entity_detection_handling',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_entities_detection_job(
    x__amz__target: XAmzTarget63 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: StartEntitiesDetectionJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.StartEventsDetectionJob',
    description=""" Starts an asynchronous event detection job for a collection of documents. """,
    tags=[
        'nlp_job_control',
        'job_management_general',
        'language_detection_handling',
        'entity_detection_handling',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_events_detection_job(
    x__amz__target: XAmzTarget64 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: StartEventsDetectionJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.StartFlywheelIteration',
    description=""" Start the flywheel iteration.This operation uses any new datasets to train a new model version. For more information about flywheels, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/flywheels-about.html"> Flywheel overview</a> in the <i>Amazon Comprehend Developer Guide</i>. """,
    tags=['flywheel_iteration_management', 'endpoint_configuration', 'nlp_job_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_flywheel_iteration(
    x__amz__target: XAmzTarget65 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: StartFlywheelIterationRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.StartKeyPhrasesDetectionJob',
    description=""" Starts an asynchronous key phrase detection job for a collection of documents. Use the operation to track the status of a job. """,
    tags=['text_insight_extraction', 'classification_job_overview', 'nlp_job_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_key_phrases_detection_job(
    x__amz__target: XAmzTarget66 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: StartKeyPhrasesDetectionJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.StartPiiEntitiesDetectionJob',
    description=""" Starts an asynchronous PII entity detection job for a collection of documents. """,
    tags=['entity_detection_handling', 'nlp_job_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_pii_entities_detection_job(
    x__amz__target: XAmzTarget67 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: StartPiiEntitiesDetectionJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.StartSentimentDetectionJob',
    description=""" Starts an asynchronous sentiment detection job for a collection of documents. Use the operation to track the status of a job. """,
    tags=['sentiment_analysis_operations', 'nlp_job_control', 'job_management_general'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_sentiment_detection_job(
    x__amz__target: XAmzTarget68 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: StartSentimentDetectionJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.StartTargetedSentimentDetectionJob',
    description=""" Starts an asynchronous targeted sentiment detection job for a collection of documents. Use the <code>DescribeTargetedSentimentDetectionJob</code> operation to track the status of a job. """,
    tags=[
        'sentiment_analysis_operations',
        'nlp_job_control',
        'classification_job_overview',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_targeted_sentiment_detection_job(
    x__amz__target: XAmzTarget69 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: StartTargetedSentimentDetectionJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.StartTopicsDetectionJob',
    description=""" Starts an asynchronous topic detection job. Use the <code>DescribeTopicDetectionJob</code> operation to track the status of a job. """,
    tags=['topic_detection_operations', 'job_management_general', 'nlp_job_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_topics_detection_job(
    x__amz__target: XAmzTarget70 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: StartTopicsDetectionJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.StopDominantLanguageDetectionJob',
    description=""" <p>Stops a dominant language detection job in progress.</p> <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the <code>STOPPED</code> state.</p> <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400 Internal Request Exception. </p> <p>When a job is stopped, any documents already processed are written to the output location.</p> """,
    tags=[
        'language_detection_handling',
        'nlp_job_control',
        'classification_job_overview',
        'job_management_general',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def stop_dominant_language_detection_job(
    x__amz__target: XAmzTarget71 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: StopDominantLanguageDetectionJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.StopEntitiesDetectionJob',
    description=""" <p>Stops an entities detection job in progress.</p> <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the <code>STOPPED</code> state.</p> <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400 Internal Request Exception. </p> <p>When a job is stopped, any documents already processed are written to the output location.</p> """,
    tags=[
        'document_classifier_management',
        'entity_recognition_management',
        'job_management_general',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def stop_entities_detection_job(
    x__amz__target: XAmzTarget72 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: StopEntitiesDetectionJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.StopEventsDetectionJob',
    description=""" Stops an events detection job in progress. """,
    tags=['endpoint_configuration', 'job_management_general', 'nlp_job_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def stop_events_detection_job(
    x__amz__target: XAmzTarget73 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: StopEventsDetectionJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.StopKeyPhrasesDetectionJob',
    description=""" <p>Stops a key phrases detection job in progress.</p> <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the <code>STOPPED</code> state.</p> <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400 Internal Request Exception. </p> <p>When a job is stopped, any documents already processed are written to the output location.</p> """,
    tags=[
        'text_insight_extraction',
        'entity_detection_handling',
        'job_management_general',
        'nlp_job_control',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def stop_key_phrases_detection_job(
    x__amz__target: XAmzTarget74 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: StopKeyPhrasesDetectionJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.StopPiiEntitiesDetectionJob',
    description=""" Stops a PII entities detection job in progress. """,
    tags=['entity_detection_handling', 'job_management_general', 'nlp_job_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def stop_pii_entities_detection_job(
    x__amz__target: XAmzTarget75 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: StopPiiEntitiesDetectionJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.StopSentimentDetectionJob',
    description=""" <p>Stops a sentiment detection job in progress.</p> <p>If the job state is <code>IN_PROGRESS</code>, the job is marked for termination and put into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it is put into the <code>COMPLETED</code> state; otherwise the job is be stopped and put into the <code>STOPPED</code> state.</p> <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400 Internal Request Exception. </p> <p>When a job is stopped, any documents already processed are written to the output location.</p> """,
    tags=['sentiment_analysis_operations', 'nlp_job_control', 'job_management_general'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def stop_sentiment_detection_job(
    x__amz__target: XAmzTarget76 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: StopSentimentDetectionJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.StopTargetedSentimentDetectionJob',
    description=""" <p>Stops a targeted sentiment detection job in progress.</p> <p>If the job state is <code>IN_PROGRESS</code>, the job is marked for termination and put into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it is put into the <code>COMPLETED</code> state; otherwise the job is be stopped and put into the <code>STOPPED</code> state.</p> <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400 Internal Request Exception. </p> <p>When a job is stopped, any documents already processed are written to the output location.</p> """,
    tags=['sentiment_analysis_operations', 'nlp_job_control', 'job_management_general'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def stop_targeted_sentiment_detection_job(
    x__amz__target: XAmzTarget77 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: StopTargetedSentimentDetectionJobRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.StopTrainingDocumentClassifier',
    description=""" <p>Stops a document classifier training job while in progress.</p> <p>If the training job state is <code>TRAINING</code>, the job is marked for termination and put into the <code>STOP_REQUESTED</code> state. If the training job completes before it can be stopped, it is put into the <code>TRAINED</code>; otherwise the training job is stopped and put into the <code>STOPPED</code> state and the service sends back an HTTP 200 response with an empty HTTP body. </p> """,
    tags=[
        'document_classifier_management',
        'nlp_job_control',
        'dataset_and_classifier_overview',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def stop_training_document_classifier(
    x__amz__target: XAmzTarget78 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: StopTrainingDocumentClassifierRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.StopTrainingEntityRecognizer',
    description=""" <p>Stops an entity recognizer training job while in progress.</p> <p>If the training job state is <code>TRAINING</code>, the job is marked for termination and put into the <code>STOP_REQUESTED</code> state. If the training job completes before it can be stopped, it is put into the <code>TRAINED</code>; otherwise the training job is stopped and putted into the <code>STOPPED</code> state and the service sends back an HTTP 200 response with an empty HTTP body.</p> """,
    tags=['entity_recognition_management', 'nlp_job_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def stop_training_entity_recognizer(
    x__amz__target: XAmzTarget79 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: StopTrainingEntityRecognizerRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.TagResource',
    description=""" Associates a specific tag with an Amazon Comprehend resource. A tag is a key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.  """,
    tags=[
        'resource_policy_control',
        'resource_tag_handling',
        'resource_tagging_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def tag_resource(
    x__amz__target: XAmzTarget80 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: TagResourceRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.UntagResource',
    description=""" Removes a specific tag associated with an Amazon Comprehend resource.  """,
    tags=[
        'endpoint_configuration',
        'resource_policy_control',
        'resource_policy_administration',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def untag_resource(
    x__amz__target: XAmzTarget81 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: UntagResourceRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.UpdateEndpoint',
    description=""" Updates information about the specified endpoint. For information about endpoints, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/manage-endpoints.html">Managing endpoints</a>. """,
    tags=['endpoint_configuration'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_endpoint(
    x__amz__target: XAmzTarget82 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: UpdateEndpointRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#X-Amz-Target=Comprehend_20171127.UpdateFlywheel',
    description=""" Update the configuration information for an existing flywheel. """,
    tags=['endpoint_configuration', 'flywheel_iteration_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_flywheel(
    x__amz__target: XAmzTarget83 = Header(..., alias='X-Amz-Target'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: UpdateFlywheelRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
